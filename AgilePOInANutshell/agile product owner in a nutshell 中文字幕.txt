0:00让我们从产品负责人的角度谈谈敏捷软件开发
0:07这是Pat(帕特),
0:09她是一个产品负责人，她有一个产品愿景
0:14她对此非常有激情，
0:14她不知道产品要实现哪些细节，但她知道为什么
0:18我们要构建这个产品，哪些问题是要解决的，为谁去解决
0:21她一直在谈论着这些事情
0:23这些是利益干系人，他们是将要使用产品并且支持它的人，
0:27或者至少被待开发系统所影响到
0:30在Pat的愿景中，这些人会爱我们的系统，并一直使用它，
0:33还会向他的朋友们宣传它
0:34利益干系人的需求和Pat的想法会以用户故事的方式表达出来，
0:39例如，假设这有一个航班预订系统
0:42人们要能够搜索某个航班，那可能就是一个用户故事
0:45Pat和利益相关者都有很多想法
0:48所以Pat帮助把这些转化为具体的用户故事，
0:5现在有人要真正地构建一个系统了
0:53那么在这里，他们是小型、同地协作的、跨职能的
0:57自组织的交付团队
0:58因为这是一个敏捷团队，所以他们不会把东西攒到最后，来一把大爆炸式的发布，
1:02相反，他们尽早而频密地发布
1:05在这种情况下，他们通常每周发布4至6个用户故事，那就是他们的容量
1:09容量很容易度量，计算每周发布的用户故事个数就好了
1:13有些故事很大，所以他们算为2个，其他一些较小，
1:17就算做半个，但所有的加起来每周大约发布46个故事
1:21有些人称之为故事点，但我只是称为每周故事数
1:24为了保持这样的节奏，不是陷入手工回归测试的泥潭，
1:29团队投入了大量的自动化测试和持续集成
1:32于是每个故事都至少在功能级别有一个自动化验收测试，
1:36且大多数代码都有自动化单元测试
1:39问题在于有一大群利益干系人在提出各种需求，
1:42他们肯定不会限于每周4至6个想法，
1:47他们都有很多想法和愿望，而每次我们交付一些东西时，
1:51他们将冒出更多的想法，并要求更多的东西
1:54所以，如果我们试图取悦他们，尝试按他们要求的完成一切，
1:59那我们会无法承受。假设团队每周开始工作在10个新故事上，
2:02输入10个和输出是4至6个，
2:05该小组将超符合，那会导致大多数人士气下降和各种坏事情出现，
2:10最终导致更低的输出
2:13和质量
2:14这是一个双输的提议，就好比想要更快地打印，就往打印机中塞更多的纸，
2:17或往已经拥挤的高速公路上推入更多的汽车，
2:21都是行不通的，只会使事情变得更糟
2:24Scrum和XP方式用
2:29“昨天的天气”来避免这个问题
2:31团队说，过去几个星期里，我们每周完成4至6个功能
2:35
2:36所我们这种应该完成4至6个功能，而产品负责人的工作是
2:41弄清楚
2:42所有可能的故事中，到底接下来先做哪4至6个故事
2:46看板方法是限制正在进行的工作(WIP)
2:51假设团队认为同时进行5个故事是最佳数目
2:56他们发现那样刚好使每个人都在忙
2:59但又不会造成过载
3:02所以他们决定5个是工作上限，每当他们完成一个故事
3:06他们将接受一个新故事，从而确保他们永远不会有超过5个故事在并行
3:09这两种方法都工作得很好，
3:13团队有刚刚够的工作要做，于是他们能工作得快速和高效，
3:16一个副作用是，团队面前将有一个队列，
3:20在Scrum中，这个队列被称为产品待办列表(PB)，
3:25需要被管理
3:26假设利益干系人每周继续要求10个新故事，
3:30而团队每周只能提供4到6个故事
3:33这意味着队列会越来越长，速度不再那么之前
3:35你知道有一个为期六个月的愿望清单，即需求待办清单，而且内容不断在增多
3:39这意味着，团队提供的每个故事，
3:43平均来说都是六个月前提出来的，那又如何敏捷起来呢
3:48只有一个办法防止队列失控，那个词就是“不”。
3:53那个词是对产品负责人最重要的一个词，也是是每天在镜子前的最佳实践，
3:56产品负责人最重要的工作是决定哪些"不要"做，并且承担
4:00对每个新功能需求都说“能"是很容易的，那只是意味着使队列继续变长。
4:04产品负责人最重要的工作是决定哪些"不要"做，
4:08并且承担决策的后果。
4:08这就是为什么它是艰难的。产品负责人决定哪些进来，哪些出去
4:13产品负责人还决定顺序，
4:16哪些是现在要构建，哪些以后再说，这个清单实际上需要多长，
4:19这是一个艰难的工作。
4:22所以Pat不会独自做这些事情，她与团队和利益干系人协作。
4:25要想能够进行优先级排序，产品负责人必须了解每个故事的价值和大小。
4:30有些故事是至关重要的，
4:33
4:34有些只是可有可无的。有些故事只需花几个小时做出来，
4:37另一些则要几个月
4:39猜猜故事价值和故事大小之间的相关性是什么样的？答对了，
4:43并不是越大越好。想想你使用过的任何系统，
4:48我敢打赌，你能想到至少有一个非常简单却非常重要的功能，
4:51你每天都在使用它，我打赌你能想到至少有一个巨大的
4:55复杂的功能，是完全不重要的。价值和大小有助于
4:59Pat聪明地排序。像这里，这两个故事差不多大小，但价值不同，
5:04所以先构建这个。
5:08而这两个故事差不多价值，但大小不同，所以先构建这个，
5:12等等。
5:14ok，这听起来很容易，但等一下，她怎么知道故事的价值，
5:18她怎么知道的故事大小？
5:20坏消息，她并不知道。这是一个猜谜游戏，
5:24这是一个每个人都参与的游戏。Pat不断地跟利益干系人交谈，
5:28找出他们看重的是什么，她不断地跟团队交谈，
5:31了解他们实现该功能的工作量大小。
5:35这些都是相对的猜测，不是绝对数字。
5:38我不知道这个苹果或草莓多重，但我敢肯定，
5:42苹果比草莓至少重五倍，
5:46但草莓更好吃，
5:46至少对我来说是这样。这是Pat用于排序所要知道的全部。
5:50这种方式很酷。在一个新的项目的开始，
5:54我们的估算将将不可避免地很槽糕，但没关系，最大的价值在于
5:58对话，而不是实际的数字。每次团队
6:01交付一些东西给真正的用户时，我们就学到了一些东西，从而更好地
6:05猜测价值和大小。
6:07这就是为什么我们持续排序和估算。试图从一开始就全部得到
6:10是非常愚蠢的，因为我们什么都不知道。
6:13所以反馈回路是我们的朋友。
6:17光有排序是不足以尽早且频密交付的。
6:20我们需要将故事分拆成小块，
6:23可能只是几天的工作。我们希望在这个漂亮的漏斗里面，
6:27小而清晰的故事在前面，较为模糊的故事在后面。
6:31通过这样即时地分解故事，我们能
6:34利用好最新的产品和用户需求洞察。
6:38我一直在谈论的所有东西，
6:39估算价值和大小、优先级排序、分拆，
6:44这些通常称为产品待办清单梳理。Pat在每周三11点至12点运行一次产品待办清单梳理工作坊
6:48
6:50每周1小时，通常整个团队都参加，有时几个利益干系人也会来。
6:53
6:54议程不大相同，有时它侧重于估算，有时
6:58是分拆故事，有时是编写故事的验收条件。
7:02等等。所以我希望你关注一个主题--沟通。
7:07产品所有权全都是关于沟通的。
7:08当我问有经验的产品负责人如何才能取得成功，通常他们
7:12会强调激情和沟通。
7:16敏捷宣言第一条叫做“个体和互动高于
7:20流程和工具”，这并非巧合。使产品负责人的工作填鸭式地往团队灌输故事，
7:25
7:26这是无聊的和无效的。Pat反而会确保每个人都明白
7:31愿景，且团队与利益干系人直接交流
7:35向用户频繁交付，形成短反馈环。
7:39这样团队才能学习，可以自主地做出日常权衡决策，
7:42那么Pat才能够专注于大局。让我们来看一些
7:45Pat和团队需要做出的权衡。
7:47首先要在不同类型价值之间的折衷。
7:51一个项目的早期，不确定性和风险是我们的敌人。
7:54有业务风险，我们是否在做正确的事？
7:57有社会风险，这些人能做出来吗？有技术风险，
8:02它能在预期的平台上运行和扩展吗？
8:05有成本和进度风险，在合理数量的
8:09时间和金钱之内完成产品。知识可以看作是
8:14风险的反面。
8:15因此，当不确定性很高时，我们的重点是知识的获取。
8:18我们专注于用户界面原型、技术探针或
8:22试验，
8:23也许客户不是太感兴趣，但仍然有价值，因为我们
8:26从客户价值角度降低风险曲线。一开始曲线看起来是这样的，
8:31随着不确定性下降，
8:34我们更逐渐关注客户价值。我们知道我们将要构建
8:38一个大房子，所以就去做就好了。
8:40通过总是先做最高价值的故事，我们得到了这个漂亮陡峭的价值曲线
8:45然后价值曲线逐渐开始平坦。
8:47我们已经构建了最重要的东西，现在我们只是增加"额外的功能"，
8:50就像冰淇淋上的点缀。
8:52这是一个很好的地方，因为Pat和团队可以在任何一点决定”削掉尾巴“
8:57并转移到另一个更重要的项目，
9:02或者在产品中启动一个全新的功能领域。这是业务敏捷性。
9:06所以这里当我谈到"价值"的时候，其实我的意思是知识价值加上
9:10客户价值。我们需要找到两者之间的权衡。
9:14另一个权衡是短期与长期的思考。
9:19我们接下来应该怎样构建？
9:21我们应该先修复紧急缺陷，还是构建那些能让用户爽翻天的牛逼新功能
9:25还是困难的平台升级从而使未来的开发更快？
9:30我们需要不断地在主动工作和被动工作之间进行平衡，
9:33或者说灭火和防火之间的平衡。
9:37这涉及到另一个权衡，
9:39我们应该着眼于"做正确的事"还是"正确地做事"，
9:43或者是"快速地做事"？理想中我们希望三个全要，但很难找到
9:48平衡。
9:49假设我们在这里，试图用完美的架构构建完美的产品。
9:53
9:54如果我们花太多时间试图得到完美的结果，我们可能会错过市场窗口，
9:58或者出现现金流问题。或者假设我们在这里，
10:01我们赶着将一个原型转化为可用的产品，
10:05短期内也许很好，但长期来看，我们可能会淹没在技术债务中
10:08交付速率会接近零。或者，假设我们在这里，
10:11以破纪录的时间建造一座美丽的大教堂。然而用户并不需要
10:15大教堂，他们需要一辆野营车。
10:16所以在Scrum角色之间有一个健康的张力点。PO往往关于在
10:20做正确的事。交付团队往往关注
10:24正确地做事。
10:25而ScrumMaster或者敏捷教练关注于缩短反馈回路。
10:30速度值得强调的。因为短反馈环路将会
10:33加快学习，所以你会更快地学会什么是正确的事情，
10:36以及如何正确地构建它。
10:38然而，所有这三个角度都是重要的，所以不断尝试找到
10:41平衡点。
10:42最后，这还有开发新产品和优化老产品之间的权衡。
10:46产品待办清单其实是一个稍显混乱的词，是因为它
10:50暗示着只有一个产品。项目也是一个令人困惑的术语，
10:53因为它暗示着产品开发"结束了"。
10:57一个产品永远没有真正的"完工"，
10:57总有维护和优化的工作要做，
11:00直至产品生命周期结束它才会下线。
11:03所以当一个团队开始开发一个新产品，上一个怎么办？
11:06把产品从一个团队交接另一个是昂贵和危险的。
11:10所以更常见的情况是，团队继续维护旧产品，
11:13同时开发新产品。所以那并不是一个产品待办清单，
11:17它更像一个团队待办清单--一个清单包含着
11:21希望国家建立，它可以是东西从不同产品的混合和
11:26希望团队去构建的东西，它可以包含不同的产品内容。产品负责人要不断地在产品之间取舍。
11:29有时，利益干系人会打电话给Pat说”嘿，我的东西什么时候做完？“
11:33或者，”圣诞节前我的东西有多少能做完？“。作为产品负责人，Pat
11:37负责管理人们的期望！或者，更重要的是，真实
11:41期望的管理。这意味着实话实说。
11:44我知道这很难，但谁说敏捷容易做了？
11:49其实只要不要求很精确，做预测并不难。
11:51如果你衡量你的团队速率，或所有
11:55团队的合并速率，
11:55你可以画出这样一个故事燃烧图。改图显示出
12:00随着时间的推移，累积交付的故事数量（或者你愿意用故事点）。
12:04注意区别。
12:05这条曲线显示了产出。那条曲线显示了效果。
12:09这是产出，那是我们希望达到的效果。
12:14我们的目标不知尽量多地产出。我们的目标是用尽可能少的产出达到期望的效果。
12:17
12:21
12:23少即是多。现在看燃烧图，
12:26画出一条乐观和一条悲观趋势线。



12:31统计巫术或者你能把视觉上和这些线之间的差距
12:35当然关系到你的速度如何波浪和不可预知的是很幸运
12:38趋于稳定随时间
12:41所以我们不确定性的代码应该得到越来越紧确定，所以回
12:44应该对利益相关者的期望管理要求拍时将所有的
12:48我们什么时候会在这里这个东西做
12:51这是一个假的范围变量的时间问题，以便帕特使用到趋势线
12:55回答最有可能某个时候四月和五月期间应该对利益相关者
13:01问拍拍
13:02多少会在圣诞节来完成，这是一个固定的时间变量的作用域
13:06问题的趋势线告诉我们
13:09我将最有可能在圣诞节前完成所有这些
13:12其中的一些，没有这些，最终应该是利益相关者说可以
13:18我们得到圣诞节这些功能
13:21现在这是一个固定的时间固定范围的问题
13:25看着红灯帕特说，没有遗憾是不会发生
13:29其次是这里的多少，我们可以在圣诞节得到完成
13:33或者这里是我们如何更多的时间将需要完成这一切
13:36它通常更能减少范围那种程度的时间，因为如果我们减少
13:40范围
13:41首先我们还是要以后延长时间和增加的其余选项
13:45故事
13:46反之不起作用，因为该死，我们不能把时钟向后
13:50所有的时间是相当恼人的这种方式是
13:52所以帕特把它后面这种方式，我们可以在这里提供的东西，其余
13:57或者我们可以在这里提供什么，后来剩下哪些你喜欢这些
14:01计算是非常简单的做这样帕特每周更新预测
14:05这里最重要的是，我们正在使用的真实数据做出预测
14:09那么我们是诚实的不确定性
14:12我说没有线对，所以这是有沟通的一个非常诚实的方式
14:15利益相关者，他们通常认识到，很多
14:18如果您的组织不喜欢真理，诚实它可能不会像敏捷
14:21现在提醒一句，如果球队积累的技术债务，如果他们
14:26没有准备的测试，而不是不断改进架构
14:29那么他们会变得越来越慢随着时间的推移和故事汉堡汉堡
14:33实际上扁平化，使预测泛几乎不可能使
14:37该团队负责维护一个可持续的速度和帕特声音
14:41迫使他们进入走捷径
14:43好吧，如果我们有多个团队更大的项目，我们有几个
14:48产品负责人每个都有自己积压的不同部分
14:51产品在所有的模型是真的一样
14:55我们仍然需要容量管理，我们仍然需要利益相关方的沟通，我们
14:59还需要产品的业主谁也说没有，我们仍然需要疏导积压
15:03我们仍然需要很短的反馈回路等速度真的是所有输出的总和
15:08从而可以用于预测或使一个单独的预测为每个团队
15:12更有意义的。然而多个团队场景的产品
15:15业主有一个重要的额外责任，相互交谈，我们
15:19要组织青少年和积压，以减少依赖
15:22但总会有一些依赖关系，我们只是无法摆脱
15:24 ，所以需要有某种同步的产品负责人开始这样
15:28他们建造的东西在一个明智的秩序，避免一些优化大
15:32项目通常要求某种形式的首席产品拥有者的角色，以保持
15:36产品负责人同步
15:37确定这是它简而言之点产品所有权
15:41希望这是对你有用