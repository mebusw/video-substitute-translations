1
00:00:01,000 --> 00:00:05,000
本中文字幕由自發性 Scrum 團隊提供：
PO 周龍鴻／翻譯：王可帆, 任蘭怡, 江岳龍, 余俊杰,
周玉萍, 林士智, 林清雅, 邱畯丞, 張峰睿, 張越程,
張鉅鑫, 陳美鳳, 黃久娟, 廖淑萍／時間軸：ZephyR(西風)

2
00:00:06,000 --> 00:00:10,076
Sportify成功的原因之一
就是我們的敏捷(Agile)工程文化

3
00:00:10,076 --> 00:00:11,104
文化，是無形的

4
00:00:12,004 --> 00:00:14,011
我們察覺不到
因為文化隨時隨地都在

5
00:00:14,011 --> 00:00:15,073
就像是我們呼吸的空氣一樣

6
00:00:15,073 --> 00:00:18,114
但若是大家都了解這個文化
我們就很有機會去維持它

7
00:00:19,014 --> 00:00:20,077
在我們成長的同時
甚至能強化它

8
00:00:20,077 --> 00:00:22,093
這就是這部影片的目的

9
00:00:22,093 --> 00:00:24,146
當我們的音樂播放器於2008年推出

10
00:00:25,046 --> 00:00:26,137
我們已經熟悉運用Scrum

11
00:00:27,037 --> 00:00:29,044
Scrum是一種廣為接受的敏捷開發方法

12
00:00:30,007 --> 00:00:32,086
Scrum提供的是建立良好團隊文化的基礎

13
00:00:32,149 --> 00:00:35,550
然而，幾年之後
我們已發展成龐大團隊

14
00:00:35,055 --> 00:00:37,073
並且發現，有些Scrum標準實務

15
00:00:37,073 --> 00:00:38,141
其實造成阻礙

16
00:00:39,041 --> 00:00:41,092
所以我們決定彈性運用這些標準

17
00:00:41,092 --> 00:00:43,145
遵循規則是好的開始
但有需要時，可以突破

18
00:00:44,045 --> 00:00:46,048
我們那時做出決定
敏捷比Scrum重要

19
00:00:46,075 --> 00:00:49,114
而敏捷原則又比任何特定原則重要

20
00:00:50,015 --> 00:00:52,084
所以我們把「ScrumMaster」
改稱為「敏捷教練」

21
00:00:52,084 --> 00:00:54,092
因為我們需要的是僕人式領導者
而不是流程主持者

22
00:00:55,064 --> 00:00:57,163
我們也開始使用「小隊」
來代替「Scrum團隊」

23
00:00:58,063 --> 00:01:00,109
而關鍵驅動力也變得相當自主

24
00:01:01,009 --> 00:01:03,050
什麼是「自主小隊」？

25
00:01:03,005 --> 00:01:06,064
「小隊」指的是小型、
跨職能、能自我組織的團隊

26
00:01:07,009 --> 00:01:08,095
人數通常少於八人

27
00:01:08,095 --> 00:01:10,177
小隊成員聚集一起

28
00:01:11,077 --> 00:01:12,109
對於開發的所有事項

29
00:01:13,009 --> 00:01:16,010
像是設計、承諾、運作、維護、營運等

30
00:01:16,001 --> 00:01:17,009
共同負起全部的責任

31
00:01:17,018 --> 00:01:21,089
每個小隊都有其長期使命，例如：
讓Spotify成為發掘音樂的最佳應用程式

32
00:01:21,089 --> 00:01:24,167
或是內部事務，例如：
執行A/B 測試的基礎架構

33
00:01:25,067 --> 00:01:28,165
基本上，「自主」指的是小隊
自行決定開發什麼產品、如何開發

34
00:01:29,065 --> 00:01:30,144
以及如何共同合作來開發

35
00:01:31,044 --> 00:01:35,263
當然，這種做法也會有限制
例如，小隊的使命

36
00:01:35,659 --> 00:01:39,000
合作開發產品的整體策略

37
00:01:39,000 --> 00:01:42,939
以及每季重新調整的短期目標

38
00:01:42,939 --> 00:01:44,570
辦公室也為了加強合作而調整改善

39
00:01:44,057 --> 00:01:46,101
這是一個典型的小隊辦公區

40
00:01:47,001 --> 00:01:51,100
小隊成員透過可調整式辦公桌和
遠端存取所有人電腦螢幕來密切合作

41
00:01:52,049 --> 00:01:56,592
小隊通常在休息室開會
討論規劃事宜及回顧檢討會議

42
00:01:56,061 --> 00:02:00,080
另一邊則是沙發區，用來開小型會議
或單純只想獨處一下

43
00:02:00,081 --> 00:02:02,093
幾乎所有的牆面都是白板

44
00:02:02,093 --> 00:02:04,100
為什麼獨立自主如此重要？

45
00:02:05,000 --> 00:02:06,005
因為它的驅動力！

46
00:02:06,056 --> 00:02:08,056
受到激勵的人能開發出更好的產品

47
00:02:08,082 --> 00:02:12,094
獨立自主當然也讓我們行動迅速
小隊在團隊裡即能做出決定

48
00:02:12,095 --> 00:02:14,180
而不是透過層層主管
眾多的委員會及規則

49
00:02:15,089 --> 00:02:17,096
獨立自主幫助我們把切換工作與等待的
時間縮到最小，所以我們可以盡力表現

50
00:02:18,059 --> 00:02:21,104
而不致陷入工作低潮
憑藉的是互信互賴與協同作業

51
00:02:22,004 --> 00:02:26,453
雖然每個小隊有自己的使命
他們還是得向產品策略看齊

52
00:02:26,489 --> 00:02:28,380
與公司整體和其他小隊保持一致

53
00:02:28,038 --> 00:02:30,977
基本上，就是在Spotify生態裡當個好公民

54
00:02:31,319 --> 00:02:34,860
因為整體Spotify任務的重要性
高於個別小隊任務

55
00:02:34,086 --> 00:02:38,117
所以最主要的原則是獨立自主
但不能自顧表現

56
00:02:39,017 --> 00:02:40,081
這就像一個爵土樂團

57
00:02:40,081 --> 00:02:43,092
雖然每個樂手都獨立自主地
演奏著自己的樂器

58
00:02:43,092 --> 00:02:46,095
卻又同時聆聽彼此的演奏
一起專注整首曲子的演出

59
00:02:47,022 --> 00:02:49,261
好的音樂就是這樣產生的

60
00:02:49,459 --> 00:02:53,050
所以我們的目標是形成一種彼此關聯性小
但整體一致性卻很高的小隊

61
00:02:53,005 --> 00:02:57,060
儘管我們尚未達到以上所說的
但我們嘗試了許多方法

62
00:02:57,629 --> 00:02:59,701
事實上，影片裡所談到的多是這個原則

63
00:03:00,349 --> 00:03:03,660
我們目前已達到這種工程文化的部分狀態

64
00:03:03,066 --> 00:03:05,158
未來還有要努力的

65
00:03:06,058 --> 00:03:08,151
「一致性」和「自主性」
就像天平的兩端

66
00:03:09,051 --> 00:03:12,052
一般認為，自主性高相對的一致性就少

67
00:03:12,061 --> 00:03:15,470
但我們比較認為
這是兩個不同層面的事情

68
00:03:16,019 --> 00:03:19,000
下面這裡代表低一致性與低自主性

69
00:03:19,000 --> 00:03:20,819
也就是一種微管理文化

70
00:03:20,819 --> 00:03:22,110
這種管理沒甚麼高階目的

71
00:03:22,011 --> 00:03:23,020
有的只有閉嘴和聽命行事

72
00:03:24,001 --> 00:03:27,010
上面這裡是一致性高，但是自主性低

73
00:03:27,019 --> 00:03:30,330
領導者除了擅於溝通哪些問題得要解決

74
00:03:30,033 --> 00:03:32,079
還會去告訴他人問題該如何解決

75
00:03:32,079 --> 00:03:37,134
但是高一致性和自主性意味著
領導者只專注在要解決甚麼問題

76
00:03:38,034 --> 00:03:40,823
但讓成員去找出解決問題的方式

77
00:03:41,129 --> 00:03:42,750
下面這些又是如何呢？

78
00:03:42,075 --> 00:03:45,168
低一致性與高自主性代表團隊各行其事

79
00:03:46,068 --> 00:03:48,129
各做各的，沒有一致的方向

80
00:03:49,029 --> 00:03:51,056
領導者控制不了甚麼事
而產品則成了怪胎

81
00:03:51,056 --> 00:03:55,345
這一塊是我們較想達到的
具一致性的自主

82
00:03:55,849 --> 00:03:58,980
我們用盡了各種辦法來達到這種狀況

83
00:03:58,098 --> 00:04:00,100
一致性使得自主成為可能

84
00:04:01,018 --> 00:04:05,033
我們的一致性越強
我們就越能要求自主

85
00:04:05,033 --> 00:04:09,832
這表示領導者的角色是去溝通
哪些問題需要解決及其原因

86
00:04:10,129 --> 00:04:13,860
而整個敏捷團隊就要協力找出最好的解決方案

87
00:04:13,086 --> 00:04:17,119
自主的結果是我們少有需要標準化的情形

88
00:04:18,019 --> 00:04:20,103
當有人問道：
你們使用哪一種程式編輯器

89
00:04:21,003 --> 00:04:22,342
或是你們如何計劃？

90
00:04:22,369 --> 00:04:24,452
答案通常是：
這要看是哪一個小隊

91
00:04:25,199 --> 00:04:27,255
有些用的是Scrum Sprints
有些採用了Kanban管理

92
00:04:27,759 --> 00:04:30,765
有些會估算工作大小，並測量完成時間
有一些則不會

93
00:04:30,819 --> 00:04:31,912
這真的是因各小隊而異

94
00:04:32,749 --> 00:04:36,783
所以與其用標準規範
我們要的是這種互相傳授的文化

95
00:04:37,089 --> 00:04:40,180
當越來越多的小隊都採用某種特定的方法
如Git這種版本控制軟體

96
00:04:40,999 --> 00:04:45,081
阻力就會越來越少
因為其他小隊就會開始跟進

97
00:04:45,819 --> 00:04:47,850
當小隊間都使用這種工具來協助彼此工作時

98
00:04:48,129 --> 00:04:50,158
它就成了一個實質上的標準

99
00:04:50,419 --> 00:04:55,600
這種非制式的作法，讓我們得以
在一致性和彈性之間保持良好的平衡

100
00:04:55,689 --> 00:05:00,500
我們的架構含有一百多個
獨立開發和部屬的系統

101
00:05:00,529 --> 00:05:04,560
系統間會有許多的互動
但每一個系統各自專注於一個特定的需求

102
00:05:04,839 --> 00:05:07,867
像是歌單的管理、搜尋或檢視

103
00:05:08,119 --> 00:05:11,204
我們以清楚的介面及規則
試著讓這些需求單純化而且相互獨立

104
00:05:11,969 --> 00:05:14,430
技術上來說
每個系統會都會由一個小隊負責

105
00:05:14,043 --> 00:05:15,702
事實上
大多數的小隊會負責好幾個系統

106
00:05:16,089 --> 00:05:18,146
但我們有一個「內部開放原始碼」模式

107
00:05:18,659 --> 00:05:20,746
而我們的文化重視分享更甚於擁有

108
00:05:21,529 --> 00:05:24,535
試想我們的第一小隊需要在系統B完成某件事

109
00:05:24,589 --> 00:05:26,615
但第二小隊對系統B的程式撰寫比較在行

110
00:05:26,849 --> 00:05:29,020
通常第一小隊會請第二小隊協助處理

111
00:05:29,002 --> 00:05:32,611
然而，如果第二小隊沒有時間
或他們有其他更重要的任務

112
00:05:32,629 --> 00:05:35,240
第一小隊不必等待…

113
00:05:35,024 --> 00:05:36,073
我們討厭等待

114
00:05:36,289 --> 00:05:38,385
相對地，我們鼓勵繼續進行
由第一小隊自行去寫程式

115
00:05:39,249 --> 00:05:41,286
之後再請第二小隊審查

116
00:05:41,619 --> 00:05:45,622
所以任何人都可以修改程式
但我們有一個同儕程式審查的文化

117
00:05:45,649 --> 00:05:47,685
這有助於品質的改善，更重要的是

118
00:05:48,009 --> 00:05:49,240
知識的散播

119
00:05:49,024 --> 00:05:52,203
隨著時間累積
我們已經發展出一些設計方針

120
00:05:52,419 --> 00:05:54,474
寫程式的標準以及其他
來降低工作上的摩擦

121
00:05:54,969 --> 00:05:55,995
但唯有在非常時期才會使用這些標準、方針

122
00:05:56,229 --> 00:06:01,080
所以，在權威與自由的天平上
我們無疑是傾向自由的

123
00:06:01,008 --> 00:06:04,747
現在，唯有以人為本，工作才得以順利推展

124
00:06:04,819 --> 00:06:06,890
我們有堅實的互敬文化

125
00:06:07,529 --> 00:06:10,960
我隨時聽到像是
「我的隊友真是超讚呀」的意見

126
00:06:10,096 --> 00:06:12,585
人們常會歸功於其他人的傑出表現

127
00:06:13,449 --> 00:06:15,492
而非自私地為自己爭功

128
00:06:15,879 --> 00:06:18,978
如果要說我們這裡有多少天才
反而很少一人獨大

129
00:06:19,869 --> 00:06:23,886
對菜鳥而言，第一眼對我們感到驚嘆的地方
就是我們的獨立自主

130
00:06:24,039 --> 00:06:26,132
你和你的隊友會被期望自己去找答案

131
00:06:26,969 --> 00:06:28,860
沒人會告訴你該做什麼

132
00:06:28,086 --> 00:06:31,725
但當你需要協助時
你會很快地獲得許多援助

133
00:06:32,499 --> 00:06:35,575
大家一致認同的真理是
我們在同一條船上

134
00:06:36,259 --> 00:06:38,297
而且必須幫助他人成功

135
00:06:38,639 --> 00:06:40,647
我們非常聚焦在激勵這件事

136
00:06:40,719 --> 00:06:43,740
舉個實例，一封由人資部主管
寄出的信件中寫道：

137
00:06:43,074 --> 00:06:47,023
「大家好，
根據我們的員工滿意度調查顯示

138
00:06:47,689 --> 00:06:50,777
91%表示在這裡工作感到滿意，4%則否」

139
00:06:51,569 --> 00:06:53,575
那滿意度看起來可能相當不錯

140
00:06:54,169 --> 00:06:59,236
尤其是到從2006到2013年
我們每年倍數成長的痛苦期

141
00:06:59,839 --> 00:07:02,880
而現在我們員工數已超過1,200名
然而人資部主管仍表示：

142
00:07:03,249 --> 00:07:06,346
「這份員工滿意度當然不算高
我們想要修正

143
00:07:07,219 --> 00:07:10,235
若你是那4%不滿意的其中一位
請與我們聯絡

144
00:07:10,379 --> 00:07:12,425
我們會在此為您服務，絕無他意」

145
00:07:12,839 --> 00:07:14,873
所以，高度滿意不代表真正滿意

146
00:07:15,179 --> 00:07:19,182
半年後情況已改善到滿意度升至94%

147
00:07:19,209 --> 00:07:21,294
毫無疑問的，原因就是堅持
以激勵為公司文化重點

148
00:07:22,059 --> 00:07:25,071
我們因而獲得最佳職場的封號

149
00:07:25,179 --> 00:07:27,257
我們當然還有許多問題需要解決

150
00:07:27,959 --> 00:07:29,053
所以我們需要持續精進

151
00:07:29,899 --> 00:07:33,944
由於我們有50個以上的小隊
座落於四個城市

152
00:07:34,349 --> 00:07:36,361
某種的組織架構還是需要的

153
00:07:36,469 --> 00:07:38,482
小隊現在分組成「部落」

154
00:07:38,599 --> 00:07:40,628
部落是一種輕量級的矩陣型組織

155
00:07:40,889 --> 00:07:43,914
個人是小隊成員，同時也是
「分會」一員

156
00:07:44,139 --> 00:07:48,164
小隊是核心
聚焦在產品交付與品質

157
00:07:48,389 --> 00:07:52,110
而分會是一個職能領域
例如品質的支援

158
00:07:52,011 --> 00:07:54,310
敏捷的訓練或網路開發

159
00:07:54,409 --> 00:07:57,425
作為一個小隊成員
我的分會領導就是直屬主管

160
00:07:57,569 --> 00:08:00,668
而「僕人式領導者」則聚焦在
訓練和指導我成為工程師

161
00:08:01,559 --> 00:08:03,631
所以我可以在不換新主管的
狀況下轉換小隊

162
00:08:04,279 --> 00:08:05,351
這是一個很棒的情形，對吧？

163
00:08:05,999 --> 00:08:07,081
只可惜，並不全然是事實

164
00:08:07,819 --> 00:08:11,610
實際上，任務編組並非一帆風順
而是瞬息萬變

165
00:08:11,061 --> 00:08:14,920
舉個實例，部落在某一瞬間
可能就全變了

166
00:08:15,479 --> 00:08:18,330
而那算是還好的

167
00:08:18,033 --> 00:08:22,452
最有價值的溝通會出現在
非正式且無法預測的方式上

168
00:08:22,749 --> 00:08:24,788
為了支援這種方式
我們也有「公會」

169
00:08:25,139 --> 00:08:28,140
公會是一個輕量級的興趣社群

170
00:08:28,239 --> 00:08:32,020
跨部門的成員齊聚
並分享特定領域知識

171
00:08:32,002 --> 00:08:35,081
例如：領導力、網路開發
或持續交付成果

172
00:08:35,081 --> 00:08:37,500
任何人皆可隨時參加或離開公會

173
00:08:38,229 --> 00:08:41,265
基本上公會有電郵名單
可召開半年度會議

174
00:08:41,589 --> 00:08:43,646
和其他非正式的溝通管道

175
00:08:44,159 --> 00:08:48,183
多數的組織圖都是假象
所以我們聚焦在社群

176
00:08:48,399 --> 00:08:49,480
而不是階層式架構

177
00:08:50,209 --> 00:08:55,234
我們認為一個夠強大的社群可以
避免變成不穩定的組織架構

178
00:08:55,459 --> 00:08:58,465
如果你永遠需要確切地知道誰做決定

179
00:08:58,519 --> 00:09:00,560
你其實不適合這裡

180
00:09:00,056 --> 00:09:06,060
自主性最重要的是我們很容易做拿手的事

181
00:09:06,006 --> 00:09:09,115
如果程式發布困難我們會試著減少

182
00:09:09,709 --> 00:09:10,790
避免成員痛楚

183
00:09:11,519 --> 00:09:14,430
那意味著越大的程式發布越發是困難

184
00:09:14,043 --> 00:09:15,135
那是一個惡性循環

185
00:09:16,035 --> 00:09:18,091
若程式發布容易我們即可常態發布

186
00:09:18,091 --> 00:09:21,460
那意味著越小程式發布是越發容易的

187
00:09:22,279 --> 00:09:27,540
維持這樣的循環而避免另一種
我們鼓勵小而常態的程式發布

188
00:09:27,054 --> 00:09:31,081
且投資更多在測試自動化和
持續交付的基礎設施

189
00:09:31,081 --> 00:09:34,410
程式發布應該是例行性的而非戲劇化出場

190
00:09:35,139 --> 00:09:37,207
有時候我們投入很多資源
讓發布更容易

191
00:09:37,819 --> 00:09:41,040
舉例來說
原本的Spotify桌面程式

192
00:09:41,004 --> 00:09:42,093
是一隻單獨、龐大的應用程式

193
00:09:42,093 --> 00:09:44,982
在早期，只由少數的開發者負責

194
00:09:45,819 --> 00:09:47,250
這還好

195
00:09:47,025 --> 00:09:49,854
但是隨著我們成長
這變成很大的問題

196
00:09:50,079 --> 00:09:52,750
許多小隊針對每個發布必須彼此同步

197
00:09:52,075 --> 00:09:55,097
這可能耗時數月
才能得到一個穩定的版本

198
00:09:55,097 --> 00:09:58,135
取代建立大量的流程
規則之類的東西來管理這情況

199
00:09:59,035 --> 00:10:02,093
我們改變架構
讓發布不互相干擾

200
00:10:02,093 --> 00:10:06,862
使用Chromium嵌入式架構
基本上客戶端就是個偽裝的網頁瀏覽器

201
00:10:07,699 --> 00:10:12,550
每個區塊就像網站的一個框架
讓小隊可以直接發布他們的產品

202
00:10:12,055 --> 00:10:14,081
當這部分的架構改變

203
00:10:14,081 --> 00:10:17,142
我們開始把每個客戶平台
看做一個客戶應用程式

204
00:10:18,042 --> 00:10:20,110
並且展成三種不同風格的小隊

205
00:10:21,011 --> 00:10:25,043
客戶App小隊、功能特性小隊
與基礎建設小隊

206
00:10:25,043 --> 00:10:28,141
功能特性小隊專注在
功能特性區塊，像是搜尋功能

207
00:10:29,041 --> 00:10:33,079
這個小隊會在全部平台上
建立、傳送及維護搜尋相關的特性

208
00:10:33,079 --> 00:10:38,110
客戶App小隊專注在
容易發行於特定的客戶端平台

209
00:10:39,001 --> 00:10:42,050
像是桌面程式、iOS或Android

210
00:10:42,149 --> 00:10:45,240
基礎架構小隊專注在
讓其他小隊更有效率

211
00:10:45,024 --> 00:10:47,068
他們提供工具和例行事務，像是：

212
00:10:47,068 --> 00:10:51,597
持續交付、A/B測試
監控和運作

213
00:10:52,209 --> 00:10:56,221
無論目前結構為何
我們始終採用追求一個「自助服務模式」

214
00:10:56,329 --> 00:11:00,410
有點像是自助餐
餐廳服務員不會直接服務顧客

215
00:11:00,041 --> 00:11:01,124
他們讓你自己來

216
00:11:02,024 --> 00:11:04,085
所以我們避免視交接為畏途，避之唯恐不及

217
00:11:04,085 --> 00:11:07,424
舉例來說，一個維運小隊
或客戶端App小隊

218
00:11:08,189 --> 00:11:10,980
他們不會把程式放入產品中

219
00:11:10,098 --> 00:11:15,136
他們的工作是讓功能特性小隊
更容易加入程式到產品

220
00:11:16,036 --> 00:11:17,129
儘管是自助模式

221
00:11:18,029 --> 00:11:21,438
我們有時需要釋出發布的
小隊之間多一點協調

222
00:11:21,699 --> 00:11:25,800
我們採用功能發布控制和
發布列車來處理這個議題

223
00:11:25,008 --> 00:11:29,052
每一個客戶端App有一個發布列車
依照一般的行程離站

224
00:11:30,024 --> 00:11:33,041
通常是每週或每三週
這要看哪一個客戶

225
00:11:33,041 --> 00:11:36,520
就像在實體的世界
如果列車頻繁且可靠的離站

226
00:11:36,889 --> 00:11:38,944
你就不需要太頻繁的事前規劃

227
00:11:39,439 --> 00:11:41,600
只要出現並且搭下一班車

228
00:11:41,006 --> 00:11:45,008
即使這三個小隊正在進行活動建置
當下個發布列車抵達

229
00:11:45,062 --> 00:11:50,221
功能特性A、B、和C已經完成
而D仍然在進行中

230
00:11:50,779 --> 00:11:52,857
發布列車將會包含所有功能

231
00:11:53,057 --> 00:11:56,126
但是未完成的那個會透過
功能特性發布控制隱藏起來

232
00:11:56,639 --> 00:11:59,677
這也許聽起來很怪
發布未完成的功能特性卻隱藏起來

233
00:12:00,019 --> 00:12:03,120
這個的好處在於早期曝露整合問題

234
00:12:03,012 --> 00:12:05,211
並且不太需要程式版本分枝

235
00:12:05,319 --> 00:12:09,610
未融合的程式隱藏了問題
這是種典型的技術債

236
00:12:09,061 --> 00:12:13,067
功能特性發布控制讓我們生產時
可動態的呈現與隱藏測試產品中的缺陷

237
00:12:13,067 --> 00:12:15,123
除了隱藏未完成工作外

238
00:12:16,023 --> 00:12:20,034
我們也把使用在A/B測試
並且逐漸推出新完成的功能

239
00:12:20,035 --> 00:12:23,048
最終，我們發布程序比過去更好

240
00:12:23,048 --> 00:12:25,157
但是我們仍然看到很多待改善的部分

241
00:12:25,589 --> 00:12:27,660
所以我們繼續實驗

242
00:12:27,066 --> 00:12:29,475
這模式看起來可能很恐怖的

243
00:12:30,069 --> 00:12:34,820
讓每個小隊加功能到產品
卻沒有任何中央控管

244
00:12:34,082 --> 00:12:35,136
我們有時候也會搞砸

245
00:12:36,036 --> 00:12:39,110
但是我們學到信任比控制更重要

246
00:12:40,011 --> 00:12:42,590
我們怎麼會雇用我們不信任的人？

247
00:12:42,689 --> 00:12:47,694
敏捷的應用有多廣，信任的範圍就多大
這意味不用勾心鬥角

248
00:12:48,189 --> 00:12:50,222
也無需恐懼

249
00:12:50,519 --> 00:12:53,910
恐懼不會抹滅信任
恐懼會扼殺的是創新

250
00:12:53,091 --> 00:12:56,260
因為若是失敗犯錯會被懲罰
人們會不敢嘗試新的事物

251
00:12:57,079 --> 00:12:59,100
接下來，讓我們來談談「失敗」

252
00:12:59,001 --> 00:13:00,740
好吧，算了！

253
00:13:00,839 --> 00:13:02,160
休息一下

254
00:13:02,016 --> 00:13:04,060
放慢腳步
泡杯咖啡

255
00:13:04,006 --> 00:13:07,012
稍微沉澱一下
當您準備好，我們再繼續下一集

256
00:13:11,000 --> 00:13:12,002
字幕版本：20150915.3

