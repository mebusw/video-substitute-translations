1
0:0:25,000 --> 0:0:30,000
我要介绍肯·施瓦伯。

2
0:0:30,000 --> 0:0:37,000
对于你们这些

3
0:0:37,000 --> 0:0:43,000
谁知道 Ken 实际上发明了 Scrum 方法论和一些

4
0:0:43,000 --> 0:0:50,000
的 Google 小组实际上已经开始在内部使用 Scrum
，而且他们一直非常，

5
0:0:50,000 --> 0:0:55,000
他们取得了很好的成绩

6
0:0:55,000 --> 0:1:2,000
Scrum 所以我想邀请 Ken 过来告诉他

7
0:1:2,000 --> 0:1:7,000
每个人都亲自了解 Scrum 是什么。本次演讲由

8
0:1:7,000 --> 0:1:13,000
真正把海报到处张贴的敏捷集团

9
0:1:13,000 --> 0:1:19,000
校园广告这个

10
0:1:19,000 --> 0:1:25,000
谈话，谈话结束后，有与肯的特别会议

11
0:1:25,000 --> 0:1:30,000
敏捷集团正在主持这个活动

12
0:1:30,000 --> 0:1:38,000
下午4点。所以如果有人想真正加入

13
0:1:38,000 --> 0:1:46,000
与 Ken 的问答环节稍后与 Mark Streiback
 交谈，他会告诉你

14
0:1:46,000 --> 0:1:59,000
它在哪个房间。你知道哪个房间吗？

15
0:1:59,000 --> 0:2:5,000
它在马克？我觉得是Auarea

16
0:2:5,000 --> 0:2:11,000
我们举行所有 Scrum 会议的房间。 
Auarea，——在 45 号楼还是 46 号楼？ 46 

17
0:2:11,000 --> 0:2:18,000
是。 46 号楼，对。如果您对问答环节感兴趣，
请与 Mark 联系。再加上一个公告

18
0:2:18,000 --> 0:2:24,000
是这个谈话正在被记录下来，它会

19
0:2:24,000 --> 0:2:34,000
在 Google 视频上公开发布。因此，
如果您有任何机密性质的问题，请保持

20
0:2:34,000 --> 0:2:43,000
一直到谈话结束。每个人，- 是的，每个人都同意吗？伟大的！
话虽如此，我将继续

21
0:2:43,000 --> 0:2:51,000
肯。 [鼓掌] 你不知道你要不要那样做。 
[笑声] 你们都不会打架

22
0:2:51,000 --> 0:2:57,000
我虽然。你们都知道 Scrum不是首字母缩略词。
这是一个事件

23
0:2:57,000 --> 0:3:7,000
橄榄球比赛，志同道合的人聚在一起，礼貌地讨论
球的所有权。 [笑声] Scrum 不是我发明的；

24
0:3:7,000 --> 0:3:13,000
那会傲慢得难以置信。所以 Scrum 
可能是一个关于什么是最好的想法的集合

25
0:3:13,000 --> 0:3:20,000
我们这个行业的人数超过了

26
0:3:20,000 --> 0:3:28,000
这些年。它以及敏捷和极限编程的紧迫性伴
随着方法论的兴起和

27
0:3:28,000 --> 0:3:35,000
流程专家和项目管理组织和瀑布，所以它更像是
这些人的联盟

28
0:3:35,000 --> 0:3:40,000
对此作出反应的想法。有两位日本绅士野中和竹内

29
0:3:40,000 --> 0:3:47,000
在《哈佛商业评论》上发表了一篇文章
“The New New Product Development Game”

30
0:3:47,000 --> 0:3:55,000
在 86 年之后，在 1988 年出版了
一本名为“知识创造公司”的书。在其中，他们

31
0:3:55,000 --> 0:4:5,000
描述了一种体现 Scrum 中许多想法的方法。
他们研究了竞争激烈的公司，即——他们正在亏损

32
0:4:5,000 --> 0:4:13,000
在某些产品中，包括富士胶片、丰田、3M 和施乐。


33
0:4:13,000 --> 0:4:18,000
和所有他研究过的这些公司提出了有竞争力的对策

34
0:4:18,000 --> 0:4:25,000
使用非常相似的方法来侵占他们的市场份额。
所有这些公司都试图了解竞争对手是什么，

35
0:4:25,000 --> 0:4:31,000
威胁尽可能清晰，然后他们召集了一个团队

36
0:4:31,000 --> 0:4:41,000
非常好的人。不仅仅是你认识工程师，
或者只是不是营销人员。相反，它是一个跨职能团队，他们想要这个

37
0:4:41,000 --> 0:4:49,000
团队为他们的公司提出有竞争力的回应。
他们选择跨职能团队的原因是了解他们公司的人

38
0:4:49,000 --> 0:4:56,000
从各个不同的角度来看，他们是否不想想出
一个伟大的财务解决方案

39
0:4:56,000 --> 0:5:3,000
从支持的角度来看是绝对没用的。他们不想来

40
0:5:3,000 --> 0:5:9,000
提出了一个伟大的工程解决方案，
这在市场上是不可能的，没有任何价值。

41
0:5:9,000 --> 0:5:16,000
所以他们想要一些对公司整体有价值的东西。
所以他们从金融界找了人

42
0:5:16,000 --> 0:5:23,000
他们从营销中得到了某人，从销售中得到了某人，
从支持中得到了某人。是的，即使有人

43
0:5:23,000 --> 0:5:31,000
从支持。谁会猜到呢？来自工程、研发、
库存、管理的人，他们把他们放在一起，说你

44
0:5:31,000 --> 0:5:37,000
伙计们知道，顺便说一句，“伙计们”在这里很合适，
但这并不是贬义的，好吧。伙计们，我们有一个可怕的

45
0:5:37,000 --> 0:5:44,000
情况，我们指望你来拯救我们的信标；我们指望你

46
0:5:44,000 --> 0:5:52,000
把我们的公司从我们倒退的角落里解救出来。
因此，我们希望您对以下内容提出有竞争力的回应

47
0:5:52,000 --> 0:5:57,000
其他公司正在做的事情。顺便说一句，你没有永远；

48
0:5:57,000 --> 0:6:3,000
我们这里有点财务危机。所以，
——好吧，你有 3 个月的时间，而不是什么

49
0:6:3,000 --> 0:6:10,000
我们希望你做的是去这个我们在镇上
为你租用的设施，然后

50
0:6:10,000 --> 0:6:17,000
我们希望您提出我们将要引入市场以重新获得的响应
我们的市场份额。哦，顺便说一句，

51
0:6:17,000 --> 0:6:27,000
在 3 个月内，我们不想要你的立场文件，
我们不想要 PowerPoint 演示文稿，我们不想要

52
0:6:27,000 --> 0:6:34,000
讨论；我们希望产品准备好。我们希望它准备好发货。


53
0:6:34,000 --> 0:6:39,000
你知道，我们不会审查您所做的事情。
你是我们的最好的人。

54
0:6:39,000 --> 0:6:46,000
为什么我们必须批准或不批准？
所以简单地去做。顺便说一句，在你的 3 个月里

55
0:6:46,000 --> 0:6:56,000
在镇上的这个设施中，我们不会打扰您，因为它太棒了。
您实际上正在从事对公司非常重要的事情。

56
0:6:56,000 --> 0:7:5,000
所以，我们不会打扰你。但是，
如果您正在做任何需要外部

57
0:7:5,000 --> 0:7:13,000
帮助，需要你没有的资源，需要你无法获得的支持，
因为你是

58
0:7:13,000 --> 0:7:20,000
从事对公司非常重要的事情，来找我们并提出要求。
然后他们拿走了

59
0:7:20,000 --> 0:7:26,000
外面到一辆公共汽车，带他们穿过城镇，
起初是路上的人

60
0:7:26,000 --> 0:7:32,000
团队，大概有 8 或 9 个人，都担心这可能是一个

61
0:7:32,000 --> 0:7:39,000
他们不知道的新形式的裁员——。 
[笑声] 然后他们安顿下来

62
0:7:39,000 --> 0:7:48,000
他们，你知道，很高兴和对方在一起，
你知道，你的妻子和我的孩子在学校怎么样，

63
0:7:48,000 --> 0:7:55,000
你知道，谈论的，所以其中一个就像，
嘿，伙计们，你知道我们

64
0:7:55,000 --> 0:8:0,000
还有2个月27天。现在，
如果我们没有真正想出一些东西

65
0:8:0,000 --> 0:8:9,000
好，我们将让我们的公司失望，
因为我们被派到这里来重新获得市场份额。这

66
0:8:9,000 --> 0:8:14,000
第二件事是我们将在 2 个月 27 天后被彻底羞辱

67
0:8:14,000 --> 0:8:25,000
说，好吧，我们什么都想不到。
你知道，这是一种糟糕的情况

68
0:8:25,000 --> 0:8:31,000
在。现在研究的这些情况中，没有一个团队没有来

69
0:8:31,000 --> 0:8:37,000
与对市场产生重大影响的事物相提并论。
其中一些是，你

70
0:8:37,000 --> 0:8:43,000
知道，恒星；其中一些还可以。但他们都不是
这样的情况，嗯，你知道，

71
0:8:43,000 --> 0:8:49,000
我们可能还需要一个月的时间，不能完全完成。
你知道他们都

72
0:8:49,000 --> 0:8:57,000
想出了一些具有竞争力的反应。 Scrum 中的
所有方面，关键在于那里。他们在一个时间盒子里，

73
0:8:57,000 --> 0:9:6,000
Scrum 中的一切都是一个时间盒子——所以事情
不会永远持续下去。嗯，你知道，我们可以想出设计

74
0:9:6,000 --> 0:9:13,000
但我们需要另一个，你知道，而更多的回来。
所以一切都是一个时间盒子。一切都完成了

75
0:9:13,000 --> 0:9:19,000
负责自我管理的跨职能团队。一个有趣的概念。
它是从精益那里借来的

76
0:9:19,000 --> 0:9:29,000
思考并且仅仅通过观察人们，那些最能弄清楚如何

77
0:9:29,000 --> 0:9:35,000
做工作的人是自己做工作的人。它是用一个

78
0:9:35,000 --> 0:9:44,000
团队规模受限。所以你不会超过 8 或 9 个人。
事实上，如果

79
0:9:44,000 --> 0:9:51,000
它更小，如果你有 3 或 4 个人，那真的很整洁，
但你仍然需要交叉功能。它是

80
0:9:51,000 --> 0:9:58,000
必须在时间盒结束时完成某些事情的团队。
不存在这样的

81
0:9:58,000 --> 0:10:4,000
时间盒作为一个提出了一些东西的东西，
它是一种抽象的东西

82
0:10:4,000 --> 0:10:10,000
只有构建它的人知道，例如对象模型或序列图。
那还没有完成。那是一个内部工件；

83
0:10:10,000 --> 0:10:20,000
这是正在进行的工作。因此，在 Scrum 中，
每次时间间隔结束时，您都必须让团队拥有一些东西

84
0:10:20,000 --> 0:10:25,000
已经完成并且可能会被运送。所以你看

85
0:10:25,000 --> 0:10:31,000
Scrum 的所有方面都在那里。杰夫·萨瑟兰和我拉

86
0:10:31,000 --> 0:10:37,000
从很多这些想法中 Scrum 在一起，我们俩都在管理

87
0:10:37,000 --> 0:10:42,000
软件公司。这是在你们中的一些人出生之前的1991年。

88
0:10:42,000 --> 0:10:48,000
-- [笑声] -- 我们读过关于 Scrum 的文章，
我们都有客户想要大的产品

89
0:10:48,000 --> 0:10:53,000
变化的数量。我们有一个庞大的代码库，我们必须维护

90
0:10:53,000 --> 0:11:2,000
维持，我们有很多竞争，你知道，影响了我们。
我们能够做到的唯一原因

91
0:11:2,000 --> 0:11:7,000
提出 Scrum，它可以适应所有这些特征

92
0:11:7,000 --> 0:11:15,000
是，我们都在使用 Smalltalk 开发软件，
Smalltalk 是第一个，我认为 Lisp 可能是另一个，

93
0:11:15,000 --> 0:11:25,000
这是第一个集成开发环境，您可以在其中快速构建
和部署甚至测试——测试产品。以便

94
0:11:25,000 --> 0:11:31,000
是 Scrum 和 Jeff 的实例化，我自己使用它

95
0:11:31,000 --> 0:11:37,000
后来我们和一些客户一起使用它。总的来说，
它无处可去。我们用它来竞争

96
0:11:37,000 --> 0:11:42,000
帮助了许多公司，但

97
0:11:42,000 --> 0:11:49,000
直到你开始看到一些其他的好东西

98
0:11:49,000 --> 0:11:56,000
IDE。所以，想想 Eclipse 和类似的东西，
现在你开始看到它拿起

99
0:11:56,000 --> 0:12:4,000
在市场上。所以这是一个想法，如果我们
没有这项技术，那将一事无成。现在

100
0:12:4,000 --> 0:12:13,000
与此同时，我们正在构建 Scrum，这是一个
管理产品开发的管理流程，——肯特贝克，罗恩

101
0:12:13,000 --> 0:12:18,000
Jefferies、Ward Cunningham 是 
Smalltalk 环境中的工程师，他们

102
0:12:18,000 --> 0:12:24,000
提出了极限编程，这是一组在该领域工作的工程实践
同类型的环境。

103
0:12:24,000 --> 0:12:31,000
因此，我们使用 Scrum来管理产品开发，
并且经常使用极限编程实践并将其扩展为

104
0:12:31,000 --> 0:12:38,000
帮助工程师建立和提出适合支持和合作的工程学科

105
0:12:38,000 --> 0:12:48,000
Scrum 类型的环境。所以两者手牵手，相互兼容，
诸如此类。 Scrum 不是一种方法论。

106
0:12:48,000 --> 0:12:53,000
如果你有一个方法，你有一个问题或问题如何去做

107
0:12:53,000 --> 0:13:2,000
有些东西，你知道，你可以去方法论，
你可以转到任何页面，比如页面

108
0:13:2,000 --> 0:13:7,000
77.6 并且有关于如何做到这一点的答案。不错。

109
0:13:7,000 --> 0:13:12,000
 Scrum 是更像是一个小婴儿进程或框架。
 这真的，真的很简单。

110
0:13:12,000 --> 0:13:18,000
所以，想一想国际象棋游戏，——很简单。它没有

111
0:13:18,000 --> 0:13:25,000
很多规则。我的意思是，你知道，我有一个骑士
一，二，不能登陆

112
0:13:25,000 --> 0:13:34,000
自己颜色的球员；它并没有更多类似的规则。而你

113
0:13:34,000 --> 0:13:40,000
可以找到非常详细的复杂战略和战术，
关于如何构建，关于如何

114
0:13:40,000 --> 0:13:45,000
下国际象棋——因为每种情况都会产生不同类型的情况

115
0:13:45,000 --> 0:13:52,000
和不同类型的思维。人们可以研究它，
人们可以思考它。但他们如何执行它，

116
0:13:52,000 --> 0:13:57,000
他们如何玩它取决于他们自己的智力，技能，

117
0:13:57,000 --> 0:14:5,000
是否他们一直在喝酒，您知道所有这些类型的特征，
而 Scrum 的方式非常相似。这是

118
0:14:5,000 --> 0:14:11,000
如此微不足道。我有时想知道有什么大不了的，

119
0:14:11,000 --> 0:14:17,000
除了它让我们不再相信别人可以告诉我们在
每一个条件下该做什么情况，它会工作。 

120
0:14:17,000 --> 0:14:24,000
Scrum 的假设是你是

121
0:14:24,000 --> 0:14:32,000
聪明，或者至少和你一样聪明，
你会利用这种智慧和你的经验

122
0:14:32,000 --> 0:14:38,000
为您当时所处的任何情况提出最佳解决方案。


123
0:14:38,000 --> 0:14:44,000
当我们第一次在2001年提出并宣布了 Agile，

124
0:14:44,000 --> 0:14:51,000
有许多评论认为敏捷非常非常好。
这是来自柏瑞·伯汉姆

125
0:14:51,000 --> 0:14:57,000
——还有像这样的人——有点被敏捷困扰

126
0:14:57,000 --> 0:15:3,000
如果您拥有一支优秀的工程师团队

127
0:15:3,000 --> 0:15:9,000
使用优秀的工程工具，有工程实践，
了解业务领域和里面的技术领域

128
0:15:9,000 --> 0:15:17,000
并且不会被打断以拥有他们需要的所有资源，
那么您可以使用 Scrum。

129
0:15:17,000 --> 0:15:26,000
虽然这样的人确实可以每次迭代都构建一个增量的软件。
那挺好的。然而，Scrum 对傻子更有效。 [笑声]

130
0:15:26,000 --> 0:15:32,000
你可以带一群白痴，甚至可能没上过学，
不懂计算机科学，不懂软件工程技术，

131
0:15:32,000 --> 0:15:41,000
讨厌彼此，不了解业务领域，拥有糟糕的工程工具，
并且每次增量都会造出废品。 [笑声] 

132
0:15:41,000 --> 0:15:47,000
这个很好。 [笑声] 
在每次迭代结束时，你想了解你在哪里。

133
0:15:47,000 --> 0:15:55,000
Scrum 的一部分，这与萨班斯·奥克斯利法案等无关

134
0:15:55,000 --> 0:16:0,000
那都是后来产生的

135
0:16:0,000 --> 0:16:8,000
它从 Scrum 那里借鉴了一点，
即透明，所以每个人总是知道你到哪里了。

136
0:16:8,000 --> 0:16:14,000
所以其他一个的意图，你知道的，
就像我们把人送到离岸开发3个月

137
0:16:14,000 --> 0:16:22,000
来构建一些东西，我们、想知道在
那个时间盒结束时我们到哪里了。

138
0:16:22,000 --> 0:16:29,000
所以在每个 Scrum Sprint 的结尾，
也就是它的迭代名称，我们想知道我们到底到哪里了。

139
0:16:29,000 --> 0:16:35,000
所以我们要求团队有一些东西“完成”，某种意义上说，
它可以被发布到市场，真正的“完成”。

140
0:16:35,000 --> 0:16:42,000
在某种程度上，具有良好工程技能的优秀工程师等等
他们将达成非常好的“完成”

141
0:16:42,000 --> 0:16:50,000
在某种程度上，如果他们连自己的鞋带都系不好

142
0:16:50,000 --> 0:16:56,000
他们根本不会有太多“完成”

143
0:16:56,000 --> 0:17:2,000
而你从一开始就立即知晓

144
0:17:2,000 --> 0:17:7,000
问了一些非常有趣的问题，比如，
你以什么为生？我在一个

145
0:17:7,000 --> 0:17:15,000
银行，他们正在取代信任系统，大系统，
对。他们将投入一个新的

146
0:17:15,000 --> 0:17:23,000
他们购买的信任系统，他们将使用一套新的软件
来建立一个用户

147
0:17:23,000 --> 0:17:31,000
与它的接口，它有 28 个对现有遗留系统的提要。
当然，它们都没有测试工具

148
0:17:31,000 --> 0:17:37,000
围绕它们，所以如果你修改了任何数据或者你
给出了参考数据提示，

149
0:17:37,000 --> 0:17:44,000
直到客户抱怨他们丢失了帐户，您才会知道。
所以他们想问 Scrum 将如何适应这一点

150
0:17:44,000 --> 0:17:52,000
他们最后的问题之一，这是一个小时，我喜欢这些对话。
所以，这是一个小时，也是他们的最后一个问题

151
0:17:52,000 --> 0:17:58,000
是，我们应该使用 Scrum 吗？这是3000万美元，

152 0:17:58,000 --> 0:18:3,000 
我认为，一个 70 个月的项目，我建议他们—— 
绝对，绝对不要使用 Scrum。

153
0:18:3,000 --> 0:18:13,000
当然，这不是你应该说的。你应该把它卖掉，
你知道的，那种

154
0:18:13,000 --> 0:18:20,000
的东西。他们说，——嗯，为什么不合适？我说这个

155
0:18:20,000 --> 0:18:26,000
项目，这在地狱中不会有滚雪球的机会。这

156
0:18:26,000 --> 0:18:33,000
是会扼杀事业，把人变成——[笑声]——酗酒者，

157
0:18:33,000 --> 0:18:41,000
让人们在街上逃跑，让女性离开我们的专业飞地。
如果你使用瀑布的版本，如果你

158
0:18:41,000 --> 0:18:48,000
使用它，——到 13、14 个月，你会很好地了解
这个项目的进展情况。 [笑声] 

159
0:18:48,000 --> 0:18:53,000
你要去然后能够开始将所有

160
0:18:53,000 --> 0:19:1,000
似是而非的否认，你知道，新的职业道路，
除了你自己以外的其他人，这会给你时间去做。


161
0:19:1,000 --> 0:19:7,000
我说如果你使用 Scrum，你就是
会知道你遇到了什么样的严重麻烦

162
0:19:7,000 --> 0:19:13,000
就在一个月后，无处可去

163
0:19:13,000 --> 0:19:21,000
去是因为——[笑声]——每个人都在说，
你说服了我们做这个项目

164
0:19:21,000 --> 0:19:28,000
你能在一个月内完成吗？让我们看看，
我们总预算的 1/17

165
0:19:28,000 --> 0:19:34,000
给了你，我们应该拥有的不止这些。所以， 

166
0:19:34,000 --> 0:19:40,000
- 这将是非常透明，该项目是一个非启动项目，
这就是 Scrum 的透明度

167
0:19:40,000 --> 0:19:52,000
让我画一张 Scrum 的图；这真的很复杂。
有一份工作清单。这个清单的优先级就像，


168
0:19:52,000 --> 0:19:58,000
你知道的，我们周末在房子周围的待办事项清单
。所以它优先考虑最重要的东西

169
0:19:58,000 --> 0:20:5,000
也许是价值最高的东西，
或者是我们想要确保我们能够摆脱的风险最大的东西

170
0:20:5,000 --> 0:20:11,000
首先，位于列表的顶部。可能不是的东西

171
0:20:11,000 --> 0:20:19,000
非常重要或我们实际上不在乎是否达不到，是朝着底部

172
0:20:19,000 --> 0:20:27,000
但我们有它可以向我们的家人证明

173
0:20:27,000 --> 0:20:36,000
我们实际上是在听他们的，我们听到了。 [笑声] 
好的，这个清单是作为开局存货的饲料

174
0:20:36,000 --> 0:20:41,000
迭代。每次迭代或 Sprint，18 个跨职能团队

175
0:20:41,000 --> 0:20:49,000
拥有为该产品集构建某些东西所需的所有技能，与

176
0:20:49,000 --> 0:20:56,000
代表客户的人，他们说，接下来你有什么最高优先级
的东西，然后这个人就走了，就是这个

177
0:20:56,000 --> 0:21:4,000
东西。他们说，好吧，所以我们认为我们可以在
下一次迭代或 Sprint 中完成大部分工作。


178
0:21:4,000 --> 0:21:11,000
现在，我喜欢的正常 Sprint 大约是 30
有一个好坚实的团队的日子。如果我担心团队遇到麻烦，我

179
0:21:11,000 --> 0:21:18,000
把它缩短到两周，这样它们就不会太紧了，

180
0:21:18,000 --> 0:21:25,000
太不平衡了。但它总是相同的长度。
所以，团队说，好吧

181
0:21:25,000 --> 0:21:32,000
你说过你想做这么多。我们，
——这是我们认为我们能做的一切

182
0:21:32,000 --> 0:21:37,000
在下一个 Sprint 中。 “做”是那里的有效词。
 “做”的意思是，把它从一个

183
0:21:37,000 --> 0:21:42,000
产品中需要的东西对已经完成和准备好的东西的要求

184
0:21:42,000 --> 0:21:48,000
用于该产品。 QA、文档、重构、符合标准
——所有这些好的工程

185
0:21:48,000 --> 0:21:54,000
实践。然后团队开始工作，他们在整个期间都受到了最少的干扰。这

186
0:21:54,000 --> 0:22:3,000
当你开始打断他们的时候，他们就开始了，你知道，这就像从气球里放气一样。你们都知道这一点。

187
0:22:3,000 --> 0:22:9,000
所以，他们有这个时期来创造它和结束

188
0:22:9,000 --> 0:22:15,000
那段时间，他们向客户展示了他们所做的事情。然后再次，

189
0:22:15,000 --> 0:22:21,000
“完成”这个词在那里很关键，因为他们无法向他们展示一些东西，--哦，我们得到了很多

190
0:22:21,000 --> 0:22:27,000
完成了，但我们无法对其进行测试。那还没有完成。哦，我们

191
0:22:27,000 --> 0:22:32,000
有很多，但没有文档。那还没有完成。哦，

192
0:22:32,000 --> 0:22:37,000
我们做了很多，但不符合标准

193
0:22:37,000 --> 0:22:45,000
因为我们没有时间。那还没有完成 所以它给他们施加了很大的压力来胜任他们的职业。

194
0:22:45,000 --> 0:22:53,000
如果没有完成，客户不会接受。所以客户看，看到什么

195
0:22:53,000 --> 0:23:0,000
他们已经完成并基于他们所做的然后重新排列此列表的优先级，以便它现在反映什么是

196
0:23:0,000 --> 0:23:7,000
下一个最高优先级的事情，再次与团队会面并说，好的，所以现在这是最高优先级的事情

197
0:23:7,000 --> 0:23:14,000
优先要做的事情，然后团队选择下一步做什么，然后开始构建它

198
0:23:14,000 --> 0:23:22,000
接下来的 30 天。所以如果我设定一个像毁灭这样的目标

199
0:23:22,000 --> 0:23:29,000
在我的比赛日，我从这里开始，我可能会按照这个列表的方式

200
0:23:29,000 --> 0:23:36,000
是这样的，归巢于它。由于竞争做不同的事情，就像购买不同的技术，做不同的事情

201
0:23:36,000 --> 0:23:42,000
事情，所以他们找到了不同的机会。所以每个月我都会回家

202
0:23:42,000 --> 0:23:47,000
目标，这就是 Scrum 的全部内容——以及

203
0:23:47,000 --> 0:23:54,000
一些规则。就像，规则之一

204
0:23:54,000 --> 0:23:59,000
就是这样，这被称为 Inspector Adapt Loop。它被称为

205
0:23:59,000 --> 0:24:8,000
反馈回路。这是一种处理复杂性、环境频繁变化、检查团队的方法

206
0:24:8,000 --> 0:24:14,000
已经能够做到和适应。例如，在那家银行的一项调整可能是——

207
0:24:14,000 --> 0:24:19,000
你们被解雇了。另一种改编可能是——你们太棒了。在哪里

208
0:24:19,000 --> 0:24:25,000
我能找到更多吗？另一个可能是——基于

209
0:24:25,000 --> 0:24:31,000
关于你所做的，我看到了这样做的机会，并且

210
0:24:31,000 --> 0:24:38,000
这个和这个，接下来。因此，您可以在这里获得营销、客户和潜在客户之间的协作，以及

211
0:24:38,000 --> 0:24:45,000
工程师以及他们接下来可以做的最有价值的事情是什么。但你实际上需要完成一些事情

212
0:24:45,000 --> 0:24:51,000
有那个。我们不允许的其中一件事——

213
0:24:51,000 --> 0:24:57,000
审查是，如果它完成它可能会是什么样子的 PowerPoints。我们不允许

214
0:24:57,000 --> 0:25:2,000
如果它完成了它可能是什么的原型。相反，我们想要

215
0:25:2,000 --> 0:25:10,000
知道我们真正在哪里——透明度。发生的另一种类型的会议，这是每天，我们问

216
0:25:10,000 --> 0:25:19,000
团队聚在一起，让彼此了解他们所处的位置。嗨，我是——我说过我会在 Sprint 迭代期间做这些事情，而这个

217
0:25:19,000 --> 0:25:27,000
这就是我所做的，这就是我所做的

218
0:25:27,000 --> 0:25:32,000
没做。嗨，这是我做的，这是我没有做的

219
0:25:32,000 --> 0:25:38,000
做，这就是我接下来要做的。所以这是一个同步

220
0:25:38,000 --> 0:25:45,000
工程师，团队中的开发人员每天都在进行，这又是透明度。

221
0:25:45,000 --> 0:25:51,000
我记得——我参加了其中一次会议和这个词

222
0:25:51,000 --> 0:26:0,000
“完成”再次困扰着会议，因为如果你在会议上说，好吧，我昨天做了这个，我今天要做这个，

223
0:26:0,000 --> 0:26:6,000
这应该有一些意义。所以我在开会

224
0:26:6,000 --> 0:26:11,000
和一群工程师，一个人说，嗯，

225
0:26:11,000 --> 0:26:20,000
我昨天做了这个，今天我要做这个。讽刺是伟大的

226
0:26:20,000 --> 0:26:27,000
leveler 和我听了，当 QA 人说，胖机会。他说，你怎么了

227
0:26:27,000 --> 0:26:33,000
说？所以我说，机会很大。他说，你是什么意思胖机会？我们的定义

228
0:26:33,000 --> 0:26:38,000
“完成”是按照标准编码，已经过审查，

229
0:26:38,000 --> 0:26:45,000
它已记录在案，我们有文档，我们有内置的单元测试

230
0:26:45,000 --> 0:26:50,000
它已被签入并成功构建。他还没有签入他的代码。哇，

231
0:26:50,000 --> 0:26:55,000
——你看到团队中有一点冲突。你知道的，他要出去

232
0:26:55,000 --> 0:27:4,000
削减你的轮胎之类的东西。我想，所以，所以 - 你为什么不检查你的东西

233
0:27:4,000 --> 0:27:9,000
他说，哦，好吧，他说，我

234
0:27:9,000 --> 0:27:15,000
通常你知道，但我们处于 30 天的 Sprint 中，而我处于

235
0:27:15,000 --> 0:27:21,000
每个人都在处理的代码区域，你知道我是否必须检查

236
0:27:21,000 --> 0:27:29,000
在每一天，我都必须与每个人协调我的变化

237
0:27:29,000 --> 0:27:36,000
else 每天的变化。所以我要等

238
0:27:36,000 --> 0:27:42,000
直到第22或23天，我会检查它

239
0:27:42,000 --> 0:27:47,000
全力以赴，团队的其他成员就像

240
0:27:47,000 --> 0:27:53,000
--. [笑声] 所以 Scrum 有很多好的整洁的东西，比如好的

241
0:27:53,000 --> 0:28:6,000
每天都有新闻，每次迭代结束时的好消息，每个冲刺结束时的好消息。但它也有一些非常糟糕的事情，比如每天发现

242
0:28:6,000 --> 0:28:12,000
你指望的人没有完成

243
0:28:12,000 --> 0:28:22,000
他们应该做的工作。就像发现他们无意

244
0:28:22,000 --> 0:28:30,000
因为他们认为那个人是老鼠——你知道个人冲突。你每天都会暴露出来。在

245
0:28:30,000 --> 0:28:37,000
在每个 sprint 结束时，发现团队并没有像营销部门希望的那样取得进展。那么，有多少

246
0:28:37,000 --> 0:28:45,000
你们中的谁熟悉 Scrum？好的，所以你知道什么是烧毁。这是跟踪进度的标准方法。如果我拿这份清单

247
0:28:45,000 --> 0:28:52,000
客户在发布中想要的工作，这就是我们要推出的东西，我把它放在

248
0:28:52,000 --> 0:28:58,000
一个水平轴并估计它代表的工作量，我采取

249
0:28:58,000 --> 0:29:4,000
团队将其转化为某种东西的能力

250
0:29:4,000 --> 0:29:14,000
这可以在每个 sprint 中发布，我每个月都在跟踪这个月，这让我感到筋疲力尽。如果我采用趋势长度

251
0:29:14,000 --> 0:29:20,000
当趋势长度开始稳定时，我可以非常有效地预测，

252
0:29:20,000 --> 0:29:26,000
什么时候准备好。那挺好的。这也可能很可怕。传统上，

253
0:29:26,000 --> 0:29:35,000
一个项目开始了，直到接近你才知道它在哪里

254
0:29:35,000 --> 0:29:41,000
结束。在这里，一个月，两个月，三个月后，

255
0:29:41,000 --> 0:29:52,000
你知道项目的去向，发布的去向。如果它朝这个方向前进——那就有问题了；有一个大

256
0:29:52,000 --> 0:30:1,000
问题。在你的邻居雅虎——你是

257
0:30:1,000 --> 0:30:9,000
友好的邻居雅虎，他们使用 Scrum。他们每个人都有一个人

258
0:30:9,000 --> 0:30:19,000
负责做出明智决策的发布版本

259
0:30:19,000 --> 0:30:26,000
为每个版本投资。而这个人是

260
0:30:26,000 --> 0:30:33,000
负责在每个 sprint 结束时查看他们所在的位置

261
0:30:33,000 --> 0:30:39,000
与他们想去的地方和做出决定的地方相比。这个人是

262
0:30:39,000 --> 0:30:45,000
叫单可拧脖子，对。 [笑声]

263
0:30:45,000 --> 0:30:50,000
所以在某些版本中，你知道它并没有像现在这样

264
0:30:50,000 --> 0:30:55,000
预料之中，所以每个人都心灰意冷

265
0:30:55,000 --> 0:31:2,000
和心烦意乱。如果发布没有按照您的方式进行

266
0:31:2,000 --> 0:31:11,000
预计它将以最高价值的功能发生

267
0:31:11,000 --> 0:31:18,000
当每个人都知道它会准备好的日期，那就是你来找的人。那是在

268
0:31:18,000 --> 0:31:24,000
第二个冲刺结束时应该说，哦，天哪，我们不会在那个日期准备好

269
0:31:24,000 --> 0:31:29,000
我们期望，因此我们将不得不投入更多的钱在

270
0:31:29,000 --> 0:31:38,000
这个版本超出了我们的预期，因为投资回报率将低于我们

271
0:31:38,000 --> 0:31:50,000
预期，因为其他人将在我们之前获得一些新功能。天哪，我们该怎么办？以使其可见的速度。 Scrum 真正伟大的事情之一是，它得到了

272
0:31:50,000 --> 0:31:56,000
所有新闻可见，无论是好是坏。它不认为有好消息或坏消息，它

273
0:31:56,000 --> 0:32:2,000
只是认为有新闻，聪明的人会想要那个新闻，所以他们

274
0:32:2,000 --> 0:32:11,000
可以为整个组织做最有益的事情。现在这是对一个人性格的考验

275
0:32:11,000 --> 0:32:20,000
组织。在尝试实施 Scrum 的组织中，可能有 30% - 35%

276
0:32:20,000 --> 0:32:29,000
将成功实施。那是因为这个核心问题。大多数组织不想面对

277
0:32:29,000 --> 0:32:36,000
他们不想看到的东西，这把它放在那里说，你打算做点什么吗？

278
0:32:36,000 --> 0:32:42,000
它与否？有多少人喜欢为 Google 工作？ [笑声] 你们有多少人看过

279
0:32:42,000 --> 0:32:48,000
它作为一个特殊的地方？很好;这很好。如果你是，

280
0:32:48,000 --> 0:32:54,000
——在浴室里你能看到这个吗？如果你在

281
0:32:54,000 --> 0:33:0,000
一个速度会给你一个日期

282
0:33:0,000 --> 0:33:6,000
这个和你的营销部门，你的产品管理部门已经告诉

283
0:33:6,000 --> 0:33:11,000
世界，它将在那个日期发布， - 那是

284
0:33:11,000 --> 0:33:18,000
尴尬的消息。现在传统上，当面对新闻时会发生营销、产品管理、

285
0:33:18,000 --> 0:33:24,000
要求您提高速度，--对吗？假设是你

286
0:33:24,000 --> 0:33:31,000
通常坐在一张非常舒适的桌子旁，双脚抬起喝啤酒，胡说八道

287
0:33:31,000 --> 0:33:43,000
与这些家伙一起，他们所要做的就是更加努力地工作，放下脚，开始工作。 [笑声] 这是合理的，对吧？正常的事情。和

288
0:33:43,000 --> 0:33:48,000
他们知道这是真的原因就是他们要做的一切

289
0:33:48,000 --> 0:33:54,000
是要求你这样做，我的上帝，你的速度确实增加了。如果你给任何

290
0:33:54,000 --> 0:34:0,000
那些发牢骚的废话，你知道，你正在尽你所能

291
0:34:0,000 --> 0:34:5,000
这将削弱质量和类似的东西，所有他们

292
0:34:5,000 --> 0:34:16,000
必须做的实际上是去找你的老板或你老板的老板，说你不在船上；你并不是计划的一部分。而你不是一部分

293
0:34:16,000 --> 0:34:24,000
你不是所有这些东西 然后，你知道，哎呀，你说这甚至不值得，因为现在，突然，

294
0:34:24,000 --> 0:34:32,000
你被视为一个坏消息的携带者，他不在船上。但你还有

295
0:34:32,000 --> 0:34:38,000
去做吧。没有出路。在我们的职业中，我们有悠久的传统来提高我们在压力下的速度。

296
0:34:38,000 --> 0:34:44,000
其中之一是我们降低了质量。我们通过不遵循标准来做到这一点。我们可以

297
0:34:44,000 --> 0:34:50,000
停止记录代码。我们可以在有更多的东西应用到

298
0:34:50,000 --> 0:34:57,000
区域。我们可以，而不是重新分解它并按照应有的方式纠正设计。而是贴在上面

299
0:34:57,000 --> 0:35:3,000
最重要的是知道这不是正确的事情

300
0:35:3,000 --> 0:35:9,000
但不知何故，我们会回到它。所以我们拥有所有这些技术。我们也不能

301
0:35:9,000 --> 0:35:15,000
构建单元测试。我们可以，不能把所有的自动化测试都放在验收测试中。

302
0:35:15,000 --> 0:35:20,000
没关系。我们可以长时间工作——没关系。 [笑声] 就像——

303
0:35:20,000 --> 0:35:25,000
现在世界上几乎所有的游戏公司都在使用 Scrum。

304
0:35:25,000 --> 0:35:34,000
原因之一是 High Moon Studios 推出了

305
0:35:34,000 --> 0:35:43,000
一个使用 Scrum 的杀手级版本，他们提前发布了，质量比预期的要好得多。他们

306
0:35:43,000 --> 0:35:49,000
拥有——它们归日本公司 Sammy Sega 所有。和

307
0:35:49,000 --> 0:35:59,000
CTO 回来说：“我们将使用 Scrum”。这是正确的事情。其中一部分是可持续的步伐。你知道，你发送

308
0:35:59,000 --> 0:36:4,000
这些人在场外工作了 3 个月来解决一个问题，并且

309
0:36:4,000 --> 0:36:10,000
他们致力于解决 8 或 9 之类的问题

310
0:36:10,000 --> 0:36:16,000
每天几个小时，并且正在考虑它。当他们

311
0:36:16,000 --> 0:36:24,000
上他们的车，他们的摩托车，他们的自行车，无论去哪里

312
0:36:24,000 --> 0:36:34,000
回到家，这个问题还在他们的脑海中盘旋。当他们挠猫的肚子，和他们的猫玩耍时

313
0:36:34,000 --> 0:36:41,000
狗，不管怎样，问题还在继续。当他们睡觉时，问题仍在继续。所以

314
0:36:41,000 --> 0:36:50,000
如果我每天为他们工作 12、14 小时，那么这个问题的解决效率就会降低。设计，

315
0:36:50,000 --> 0:36:57,000
他们实施它的方式变得不太好。他们编写代码的方式变得不那么有效。所以他们是

316
0:36:57,000 --> 0:37:3,000
每天写 8 或 9 小时可持续的节奏，日本管理层说，

317
0:37:3,000 --> 0:37:8,000
显然在日本他们工作很长时间；它是

318
0:37:8,000 --> 0:37:13,000
成为其中一部分的标志

319
0:37:13,000 --> 0:37:18,000
该组织。所以你必须每天工作12、14小时；否则你不是真的

320
0:37:18,000 --> 0:37:28,000
买进。所以他们每天工作 12 到 14 个小时，他们

321
0:37:28,000 --> 0:37:34,000
发现缺陷增加了 60%。以及纠正这些缺陷的成本更多

322
0:37:34,000 --> 0:37:39,000
而不是抵消他们正在构建的附加功能。所以

323
0:37:39,000 --> 0:37:46,000
他们下降到 8 或 9 小时。 Sammy Sega Management 开车经过

324
0:37:46,000 --> 0:37:52,000
晚上，他们看着建筑物，建筑物是黑暗的。

325
0:37:52,000 --> 0:37:57,000
而且停车场是空的。这些人，——这些人不是好人。所以他们

326
0:37:57,000 --> 0:38:3,000
把公司卖给管理层，管理层收购，因为他们在文化上不能

327
0:38:3,000 --> 0:38:10,000
站住他们。两个月后，管理层发布了产品，并以两倍的价格卖给了生产商

328
0:38:10,000 --> 0:38:19,000
收购成本，这当然在整个游戏行业引起了巨大的信息传播，现在每个人都采用了 Scrum。这个想法是

329
0:38:19,000 --> 0:38:27,000
提高速度的方法之一不是延长工作时间。所做的一切

330
0:38:27,000 --> 0:38:32,000
是创造，生产更多的废话。但这是我们历史悠久的传统之一。所以

331
0:38:32,000 --> 0:38:41,000
我们使用所有这些方法——而且我们产生了更多的废话。好的。好的，这很有趣，但是

332
0:38:41,000 --> 0:38:50,000
什么，对吧？那是我们的职业；这就是我们生命中的命运。不幸的是，当我一直在帮助组织实施 Scrum 时，我遇到了，

333
0:38:50,000 --> 0:38:55,000
——我遇到了一个非常普遍的问题

334
0:38:55,000 --> 0:39:2,000
组织。现在我向你提到这个的原因是为了让你思考

335
0:39:2,000 --> 0:39:7,000
关于它。当然，这不会发生在这里，好吧。你应该——听着

336
0:39:7,000 --> 0:39:16,000
这个问题，以确保它不会发生。这些组织有一个问题，就是所谓的核心或基础设施软件。

337
0:39:16,000 --> 0:39:22,000
在这个燃尽图中，他们可以即时构建新功能。他们是

338
0:39:22,000 --> 0:39:32,000
真正优秀的开发人员。这就是烧毁。不幸的是，所有这些新功能都必须链接到这个软件基础设施才能真正发挥作用。你知道，所以

339
0:39:32,000 --> 0:39:38,000
基础设施是一切真正发生的核心处理。他们遇到的问题是核心软件的速度

340
0:39:38,000 --> 0:39:44,000
是这样的。因此，如果您愿意，-- 如果

341
0:39:44,000 --> 0:39:49,000
它需要你构建一个新功能，它需要一个

342
0:39:49,000 --> 0:39:55,000
这些，它会比你想象的多 20 倍，因为你的吞吐量

343
0:39:55,000 --> 0:40:2,000
受到该核心功能的限制——这是个坏消息。所以，我看了

344
0:40:2,000 --> 0:40:8,000
了解核心功能的来源，因为大多数组织似乎都拥有它，包括

345
0:40:8,000 --> 0:40:16,000
你的许多竞争对手。而这一切似乎

346
0:40:16,000 --> 0:40:22,000
具有三个特点。首先是它很脆弱。

347
0:40:22,000 --> 0:40:31,000
如果我更改了该核心功能中的一件事，它往往会破坏其他事情，——非常糟糕。

348
0:40:31,000 --> 0:40:37,000
核心软件的第二个特点，基础软件没有很好的测试

349
0:40:37,000 --> 0:40:44,000
围绕它的线束；围绕它的良好的自动化测试工具。所以如果你

350
0:40:44,000 --> 0:40:50,000
进去，你打破了一些东西，你倾向于不

351
0:40:50,000 --> 0:40:55,000
知道它直到它结束

352
0:40:55,000 --> 0:41:2,000
在所有服务器上，然后您的客户会让您知道。这不好。第三件事是

353
0:41:2,000 --> 0:41:8,000
特点是全公司只剩下几个傻子还知道

354
0:41:8,000 --> 0:41:15,000
如何并且愿意在基础设施上工作。其他人都逃到了较新的地方

355
0:41:15,000 --> 0:41:22,000
更容易使用和更容易构建的东西。和

356
0:41:22,000 --> 0:41:27,000
这就是为什么核心

357
0:41:27,000 --> 0:41:35,000
功能的速度要低得多。我记得有一家公司是你的竞争对手，有

358
0:41:35,000 --> 0:41:42,000
约 120 名工程师、各类开发人员，其中 10 人仍能胜任

359
0:41:42,000 --> 0:41:48,000
致力于核心功能。其他 110 人正在研究新事物。

360
0:41:48,000 --> 0:41:56,000
好的，所以你可以想象这个问题，如果这是新东西的烧毁。但这是它的油门。我如何获得

361
0:41:56,000 --> 0:42:5,000
新的东西出来，因为它真的受到核心功能的限制，我们很难让他们理解，直到我们刚刚

362
0:42:5,000 --> 0:42:11,000
开始了一个sprint，——sprint计划会议。我们把所有的工程师都带进了

363
0:42:11,000 --> 0:42:16,000
房间里说，好吧，下个月你想做的事情，

364
0:42:16,000 --> 0:42:24,000
什么是最高优先级，第二高优先级，第三高优先级，第四。我们刚刚列出了 8 或 9 个项目

365
0:42:24,000 --> 0:42:34,000
按优先顺序。我们说，好的，第一领域的产品经理和首席工程师

366
0:42:34,000 --> 0:42:42,000
第一个区域上来。现在选择你需要在下个月完成这项工作的人员，包括

367
0:42:42,000 --> 0:42:52,000
当然是核心工程师。他们做到了，我们说，好吧，现在离开，离开这里开始工作。我们对第二队、第三队、

368
0:42:52,000 --> 0:42:58,000
第四个团队，我们找到了第五个产品经理和首席工程师，他们

369
0:42:58,000 --> 0:43:5,000
说我们无能为力。没有核心工程师，没有 DVA 人，没有改变的人

370
0:43:5,000 --> 0:43:15,000
我们需要制作这些的使用界面部分，我们的新

371
0:43:15,000 --> 0:43:20,000
功能。所以我们什么也做不了。好的，所以我们环顾了房间

372
0:43:20,000 --> 0:43:30,000
剩下 60 名工程师。它们完全受到核心功能的限制。所以，我看过这个问题。我们已经

373
0:43:30,000 --> 0:43:37,000
提出工程解决方法。如果你有足够的钱，你可以重建你的核心。如果你没有足够的钱

374
0:43:37,000 --> 0:43:43,000
你的竞争对手正在扼杀你的脖子，你转移到另一个市场或者你卖掉你的

375
0:43:43,000 --> 0:43:50,000
公司。 [笑声] 风险投资家们现在都参与其中，购买被称为设计死软件的死公司。但

376
0:43:50,000 --> 0:43:58,000
我一直很困扰这个核心软件是从哪里来的。我的意思是——他们买了吗

377
0:43:58,000 --> 0:44:3,000
它？有没有人，你知道，拉扯，欺骗他们；拉羊毛

378
0:44:3,000 --> 0:44:11,000
在他们的眼睛上。他们怎么买了这个核心软件？你知道那是我最愚蠢的事

379
0:44:11,000 --> 0:44:21,000
可能见过。然后我开始思考这个问题，并在几家公司进行了检查，我看到的是

380
0:44:21,000 --> 0:44:27,000
-- 假设您的产品之一。当然不在这里——而且你有一个

381
0:44:27,000 --> 0:44:35,000
速度为 20。但是您的产品人员、营销人员需要

382
0:44:35,000 --> 0:44:42,000
更多的功能。他们只是需要它，好吧。他们必须拥有它。和

383
0:44:42,000 --> 0:44:49,000
所以，这将需要，因为那是更多的东西，这将需要你有

384
0:44:49,000 --> 0:44:56,000
速度为 22。好吧，天哪，你是什么， - 你打算怎么

385
0:44:56,000 --> 0:45:1,000
获得22的速度？当你醒来时你会变得更聪明吗

386
0:45:1,000 --> 0:45:9,000
向上？那可能不会这样做。你要去吗

387
0:45:9,000 --> 0:45:17,000
安装新的工程工具，你打算，-- 没有一个行不通。所以，你实际上会做什么

388
0:45:17,000 --> 0:45:24,000
提高速度当然是切割质量，因为如果你去掉质量，你

389
0:45:24,000 --> 0:45:34,000
可以做更多的废话，对吧？ [笑声] 所以你得到了速度效果。现在如果你做这个和那个版本

390
0:45:34,000 --> 0:45:41,000
准时出门，你认识的顾客的一些抱怨，无论如何。但客户总是抱怨和

391
0:45:41,000 --> 0:45:46,000
产品经理被提升，成为，你知道，开一辆新的宝马，停在一个

392
0:45:46,000 --> 0:45:52,000
花哨的地方和所有这些事情都会发生。那么会发生什么

393
0:45:52,000 --> 0:45:59,000
是一个接一个的释放，--所以会发生什么，他们得到一个速度

394
0:45:59,000 --> 0:46:9,000
22. 你开始的下一个版本，因为你正在使用一个稍微差一点的代码库，在它未重构的代码中有聪明的技巧，没有

395
0:46:9,000 --> 0:46:20,000
测试——你真正能做到的最佳速度是 18。这不好，没有人会升职

396
0:46:20,000 --> 0:46:25,000
在那。所以产品管理团队下来说，伙计们，你们只是

397
0:46:25,000 --> 0:46:30,000
必须这样做。所以

398
0:46:30,000 --> 0:46:36,000
你再次降低质量，但这次你降低质量

399
0:46:36,000 --> 0:46:42,000
你能做的最好的——是20，因为你从

400
0:46:42,000 --> 0:46:47,000
更糟糕的代码库。现在大约需要5年，发布

401
0:46:47,000 --> 0:46:54,000
通过释放，--[笑声]--为你在这里

402
0:46:54,000 --> 0:47:0,000
构建自己的设计死产品。您不必购买它，您可以自己构建它。 [笑声]

403
0:47:0,000 --> 0:47:6,000
当你这样做时不要忘记把自己置于竞争的角落，

404
0:47:6,000 --> 0:47:14,000
这是在一本名为“创新者困境”的书中，留下某人

405
0:47:14,000 --> 0:47:21,000
其他必须解决这个问题的人。 [笑声] 因为它太可怕了

406
0:47:21,000 --> 0:47:29,000
我不确定您的代码库，但这是我们职业中的一个真正问题，并且

407
0:47:29,000 --> 0:47:38,000
这是我们实施 Scrum 困难的核心。它有两个方面。一种是，当我们被告知

408
0:47:38,000 --> 0:47:43,000
做更多，我们不讲灵魂就削减质量。这只是第二天性。一世

409
0:47:43,000 --> 0:47:48,000
已经培训了超过 5500 人并让他们通过

410
0:47:48,000 --> 0:47:55,000
像这样的练习，但非常微妙，非常偷偷摸摸，推动来了

411
0:47:55,000 --> 0:48:4,000
推，他们可以选择说，好吧，我们做不到，或者

412
0:48:4,000 --> 0:48:10,000
说我们会做到并降低质量。 5500 人中只有 120 人拒绝。其他人都有

413
0:48:10,000 --> 0:48:19,000
只是自动降低质量；它

414
0:48:19,000 --> 0:48:24,000
存在于我们的骨骼中——肌肉记忆。这

415
0:48:24,000 --> 0:48:32,000
这种习惯的另一部分是产品管理，他们相信魔法，他们所要做的就是告诉我们

416
0:48:32,000 --> 0:48:56,000
做某事，这就是我们通过削减质量支持的错觉，它会完成。还有这些

417
0:48:56,000 --> 0:49:4,000
是——所谓的短期策略。这些都是可怕的长期战略，因为它是让你的公司陷入困境的战略。现在我

418
0:49:4,000 --> 0:49:12,000
不确定这是否适用于您的产品管理。他们生产 MRD 和 PRD，东西

419
0:49:12,000 --> 0:49:19,000
像那样。原来他们的

420
0:49:19,000 --> 0:49:25,000
实物期权不一定会迫使您以较低的质量做更多的事情，而是

421
0:49:25,000 --> 0:49:32,000
更改他们实际放入版本中的内容。记得我们说过他们有一个

422
0:49:32,000 --> 0:49:40,000
优先的产品待办事项。他们只能放入真正高价值的东西，然后停止放入

423
0:49:40,000 --> 0:49:45,000
发布并发货。之一

424
0:49:45,000 --> 0:49:56,000
业界的统计数据是，超过 65% 的交付后必须维护和维持的功能很少或从未使用过。所以

425
0:49:56,000 --> 0:50:1,000
这会推动，当你对降低质量说不的那一刻，它就会承担责任

426
0:50:1,000 --> 0:50:7,000
产品管理然后考虑给定速度，给定时间，给定市场，我能做什么

427
0:50:7,000 --> 0:50:13,000
优化我们的市场影响，而不仅仅是想出

428
0:50:13,000 --> 0:50:22,000
洗衣单。这些都是巨大的变化，这一切都源于迭代、渐进、透明的自我管理团队。你会

429
0:50:22,000 --> 0:50:29,000
有，如果你使用 Scrum，每个团队都有一个名字叫 Scrum Master，

430
0:50:29,000 --> 0:50:40,000
也称为刺。 [笑声] 这个人的工作是

431
0:50:40,000 --> 0:50:47,000
以确保您不降低质量。该死，——他们没有权威，但他们，他们能做的

432
0:50:47,000 --> 0:50:52,000
做的是如果我们已经定义了一个增量具有一定的质量水平

433
0:50:52,000 --> 0:50:57,000
以便向我们的产品管理人员展示，

434
0:50:57,000 --> 0:51:5,000
他们的工作是确保质量在那里。如果质量不行，不是让你展示它，而是说给

435
0:51:5,000 --> 0:51:10,000
产品经理——我们失去了理智。我们还没有完成。它会带我们另一个

436
0:51:10,000 --> 0:51:17,000
一个月来完成这个，让它以这种方式冒泡。这个人大概是

437
0:51:17,000 --> 0:51:23,000
世界上最不爱的人，因为他们就站在

438
0:51:23,000 --> 0:51:29,000
产品管理相信任何数量的事情都可以完成和

439
0:51:29,000 --> 0:51:36,000
我们愿意降低质量以帮助他们支持这一信念。这些人的倦怠率是

440
0:51:36,000 --> 0:51:44,000
通常像 13、14 个月。 [笑声] 我们经常从 QA 等毫无希望的专业领域得到它们。 [笑声] QA 的人习惯做

441
0:51:44,000 --> 0:51:50,000
令人难以置信的事情，没有权威，没有尊重，也没有成功的希望。所以这就是他们拿这些的地方

442
0:51:50,000 --> 0:51:55,000
人们。 [笑声] 我可以永远说话，但我得到了一个

443
0:51:55,000 --> 0:52:2,000
有点热。关于 Scrum、敏捷、方式，我可以为你回答什么问题

444
0:52:2,000 --> 0:52:7,000
它正在进入市场，关于它对你的职业道路的影响，关于它的

445
0:52:7,000 --> 0:52:14,000
影响你的功能领域的事情，比如。 [问题] 他说你拿到了一个 PRD 并且有

446
0:52:14,000 --> 0:52:19,000
通常在发布期间对其进行更改。怎么能

447
0:52:19,000 --> 0:52:27,000
那是？ [笑声] 在一个普通项目中，35% 的产品需求都会发生变化。我会告诉你这是在哪里

448
0:52:27,000 --> 0:52:35,000
来自。这来自瀑布，25年的瀑布。好的，你是营销部门、产品管理部门、客户，我们是工程部门。

449
0:52:35,000 --> 0:52:41,000
我们会接受你告诉我们做的任何事情，我们会去

450
0:52:41,000 --> 0:52:50,000
为它设计一个架构，一个基础设施的详细设计。我们将实际编写代码和所有

451
0:52:50,000 --> 0:52:55,000
那些东西，如果你改变主意，和

452
0:52:55,000 --> 0:53:0,000
我们在这里，它将产生巨大的影响。这

453
0:53:0,000 --> 0:53:6,000
统计数据是，如果您在项目开始时改变主意，

454
0:53:6,000 --> 0:53:12,000
一美元。同样的改变 70% 通过项目将花费

455
0:53:12,000 --> 0:53:20,000
60，——不，它会花费 100 美元。所以我们让你靠墙站起来

456
0:53:20,000 --> 0:53:27,000
我们抓着你说，告诉我们一切

457
0:53:27,000 --> 0:53:34,000
你想要在这个版本中，一切，因为如果你改变主意，它会让你非常痛苦。

458
0:53:34,000 --> 0:53:39,000
所以你回家，你知道，你和你的朋友聊天，你和你的朋友聊天

459
0:53:39,000 --> 0:53:46,000
猫，你想到你可能想到的一切，你

460
0:53:46,000 --> 0:53:52,000
把它放在珠三角。 [笑声] 没用没关系。你刚才

461
0:53:52,000 --> 0:53:58,000
要知道，如果你不说，那将是可怕的

462
0:53:58,000 --> 0:54:4,000
痛苦。所以我们已经训练你把它全部吐出来。谢谢你。 [笑声和

463
0:54:4,000 --> 0:54:13,000
掌声] 所以一，他给了我们很多没有市场价值的东西，因为我们已经告诉了我们一切。这

464
0:54:13,000 --> 0:54:25,000
第二件事是我们让你害怕改变主意，——对吧？现在，如果我们让你拥有，而不是 PRD，

465
0:54:25,000 --> 0:54:37,000
我们给你

466
0:54:37,000 --> 0:54:57,000
你想要的东西的清单

467
0:54:57,000 --> 0:55:3,000
在发布中，我们只是说，列出它。你知道用例或用户存储

468
0:55:3,000 --> 0:55:11,000
或事情，有一些细节，但优先考虑。优先考虑它，以便事情

469
0:55:11,000 --> 0:55:19,000
你真正想要的在顶部，而你不太关心的东西在顶部

470
0:55:19,000 --> 0:55:25,000
底部，这可以是任意长的列表。还有什么

471
0:55:25,000 --> 0:55:36,000
我们会让你做的是，如果这是你的日期，根据我们的速度，你可以选择发布中的内容，

472
0:55:36,000 --> 0:55:41,000
因为我们正在交付它增量，增量，增量。您可以选择并添加

473
0:55:41,000 --> 0:55:50,000
一点一点，一点一点，一点一点。所以你得到了最高价值的东西，你可以改变它。你可以

474
0:55:50,000 --> 0:55:59,000
放入新的东西，去掉旧的东西；这是一年的购物清单。我们只是建造它的工程师。打个比方，我们是

475
0:55:59,000 --> 0:56:4,000
像法拉利；你是司机。你可以加入我们

476
0:56:4,000 --> 0:56:12,000
把我们推过悬崖，倒退到悬崖上——更糟糕的是，绕着圈子，有点愚蠢，到一个每个人都

477
0:56:12,000 --> 0:56:19,000
正在享受他们所处的位置，这是一件好事

478
0:56:19,000 --> 0:56:25,000
要做到这一点，那是一个好的产品经理。所以我们

479
0:56:25,000 --> 0:56:31,000
让他们有责任推动我们一个接一个地冲刺

480
0:56:31,000 --> 0:56:40,000
冲刺到能提供最高价值的东西。如果我们能够并且有统计技术

481
0:56:40,000 --> 0:56:55,000
为此，评估现在在珠三角地区的清单

482
0:56:55,000 --> 0:57:0,000
我们会说这个有市场影响

483
0:57:0,000 --> 0:57:6,000
7200 万美元，这个有 1400 美元的市场影响 这个有一个

484
0:57:6,000 --> 0:57:12,000
1美元的营销地点。当我们开始构建这些并且您构建累积值图时

485
0:57:12,000 --> 0:57:17,000
由团队交付，这有意义吗，-- 你会看到一个类似的图表

486
0:57:17,000 --> 0:57:24,000
这是您预先构建基础架构的地方，然后这是交付的价值，这是

487
0:57:24,000 --> 0:57:30,000
时间。您开始预先交付所有非常有价值的东西，然后在某个时候开始交付

488
0:57:30,000 --> 0:57:36,000
不值得花钱买的东西。还有那件事

489
0:57:36,000 --> 0:58:6,000
我们对产品经理进行培训，当你做到这一点时

490
0:58:6,000 --> 0:58:13,000
点，停。他们习惯了站在后面。这就是说，你在车里。驾驶

491
0:58:13,000 --> 0:58:19,000
它一寸一寸地，那是一个真正的变化。所以我们

492
0:58:19,000 --> 0:58:25,000
说改变主意。不要——顺便说一句，在精益制造中，精益思维——库存是

493
0:58:25,000 --> 0:58:31,000
负债，而不是资产。因此，如果他们花费

494
0:58:31,000 --> 0:58:36,000
很多时间思考它，你可以思考它的方式是

495
0:58:36,000 --> 0:58:42,000
所谓的分析权，然后他们记录下来，他们已经沉没了大量

496
0:58:42,000 --> 0:58:48,000
钱到他们的珠三角。然后如果我们说让我们不要建造一些

497
0:58:48,000 --> 0:58:54,000
其中，那是浪费。所以我们分解了这个待完成的工作列表，它曾经是一个 PRD。前 20% 拥有

498
0:58:54,000 --> 0:59:1,000
花了很多心思，

499
0:59:1,000 --> 0:59:26,000
接下来的 20% 有

500
0:59:26,000 --> 0:59:32,000
较少考虑，底部 60% 是一次性的，我们甚至不会详细考虑，直到并且除非它冒泡

501
0:59:32,000 --> 0:59:39,000
完毕。谢谢你。是的。 [问题] 顶层的建筑和设计

502
0:59:39,000 --> 0:59:44,000
优先事项。赦免。 [问题] 一直在问的一个问题，关于敏捷的全部内容是，在哪里做

503
0:59:44,000 --> 0:59:50,000
你做架构基础设施，我们驱动具有非功能性需求的架构基础设施。所以，例如，

504
0:59:50,000 --> 0:59:57,000
如果这必须在一个安全的环境中同时支持 500 万客户，那将是一个非常

505
0:59:57,000 --> 0:1:0,000
高优先级非功能性项目。所以，这可能会在某种程度上得到解决

506
0:1:0,000 --> 0:1:0,000
冲刺，第二冲刺，第三冲刺。然而，Scrum 中有一条规则，你必须交付一个

507
0:1:0,000 --> 0:1:0,000
业务功能，客户可以使用的东西，每个冲刺。因此，这意味着您可能会在第一个 sprint 中交付一层架构基础设施，其中一部分被驱动到细节工作和可演示中。原因

508
0:1:0,000 --> 0:1:0,000
我们这样做是，第一，它让客户保持参与，第二，它证明

509
0:1:0,000 --> 0:1:0,000
您正在设计的架构基础设施有效。作为一个职业，我们能够在很长一段时间内毫无影响地思考，这使我们能够带来

510
0:1:0,000 --> 0:1:0,000
每个月都会得出一个结论。因此，如果我再次查看一张图表，其中显示了在建筑密集型工作中花费的时间量，这是工作，这是时间，花费在架构基础设施上的时间量将像这样以及数量花在业务功能上的时间会这样。但是每个 sprint 我们都会交付一个业务功能，证明我们的架构基础设施正在工作。是的。 [问题] [笑声] 到处都是——有些非常好，有些不是，有些是优秀的工程师，有些是优秀的 QA 人员，有些是优秀的产品管理人员。更多的是一种决心，即他们将尽一切努力帮助团队交付满足客户每个 sprint 需求的高质量软件，而其他任何事情都是障碍，他们会消除它。现在我们最近开始实施的规则之一是死的 Scrum 大师，是一个无用的 Scrum 大师。因此，无缘无故与组织对抗是没有用的。有点滑稽，但不是真的。 QA 是他们的重要来源。现在很多公司在不同的地理位置都有研发中心，并不是所有的地方都具备所有的功能。因此，对于某些偏远地区，某些地区只有有限数量的不同类型的功能。他们如何参与这种环境？ [问题] 不，它是——问题可能是，我们如何优化以及我们如何应对？我们与从立陶宛到赫尔辛基的所有团队合作过

511
0:1:0,000 --> 0:1:0,000
进入中国——一个团队，这太可怕了。但是领域知识是必要的，所以他们一起工作，他们一起工作。

512
0:1:0,000 --> 0:1:0,000
当他们在工作时，他们会做一些技巧，比如让语音对讲机在所有人之间保持活跃，这样他们就可以轻松交谈。明确的两个关键答案是，他们必须在同一个开发环境中工作，并且在每个版本开始时，他们必须在一起至少一个月到两个月，以便他们可以讨论并弄清楚他们是如何工作的在他们回到家之前做这件事。否则，根本不值得追求。最后一个问题。 [问题] 是的。 [问题] 在项目中尝试，在团队中尝试，在发布中尝试——看看什么有效。确保您知道出现的问题通常与 Scrum 无关。它会导致那里已经存在的问题变得显而易见，然后的问题是，您是要解决它们还是要与这些问题一起蹒跚而行。几乎每个停止使用 Scrum 的组织，都是因为它发现了一些文化问题，管理层不愿意停止告诉工程师如何做他们的工作，开发人员不愿意跨职能地一起工作。工程师实际上无法在每次迭代中将所有东西整合在一起，并且不愿意改进他们的工程实践来这样做。 Scrum 就像煤矿里的金丝雀。这是对它是否是一个称职的工程组织的考验。它可能不是一开始的，它会给你所有你需要做的事情来实现它。但实现它的工作是该组织的。那是他们的工作，问题是软件对他们来说是否重要，以及他们是否足够胜任

513
0:1:0,000 --> 0:1:0,000
他们的职业是这样做的。这真的很难。谢谢

