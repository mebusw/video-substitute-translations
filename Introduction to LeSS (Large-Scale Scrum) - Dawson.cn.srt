0
0:0:00,000 --> 0:0:04,000
Jacky Shen（CST, LFST, CTC）/ Lv Yi（CST, CLT）
简体中文字幕由自组织Scrum团队翻译（Build 20190115）

1
0:0:05,000 --> 0:0:09,000
优秀的产品是如何诞生的？

2
0:0:09,000 --> 0:0:13,000
为了开发一个优秀的小型产品，
我们会和我们的团队、客户坐在一起磋商，

3
0:0:13,000 --> 0:0:19,000
每隔几分钟就交付一个新的版本，
共同在技术层面上协作，以解决他们的问题。

4
0:0:19,000 --> 0:0:23,000
你已经知道，对于开发小型产品而言，
这就是最佳的方式。

5
0:0:23,000 --> 0:0:27,000
但是大型产品开发时通常是怎样的情形呢?

6
0:0:27,000 --> 0:0:34,000
通常我们从一个内部部门拿到一份枯燥乏味的规格说明书，
然后把我们完成的工作交接给另一个内部部门。

8
0:0:34,000 --> 0:0:39,000
我们和经理们打交道，而不是直接面对客户，
在整个的流程中也没有太多的话语权，

9
0:0:39,000 --> 0:0:43,000
对产品整体的影响能力极其有限，
同时我们也缺乏目标感。

10
0:0:43,000 --> 0:0:48,000
我们甚至认为我们正在采用着Scrum
或者其他一些敏捷开发方式，

11
0:0:48,000 --> 0:0:56,000
但是我们的组织机构无力学习和针对现实进行调整，
这样继续下去早晚有一天让我们无法立足。

12
0:0:56,000 --> 0:1:00,000
小规模开发中有哪些发挥更好的作用？

13
0:1:00,000 --> 0:1:03,000
我们的方式是以客户为中心，

14
0:1:03,000 --> 0:1:05,000
我们从整体视角来看待产品。

15
0:1:05,000 --> 0:1:11,000
我们让流程最简化，
我们对产品和工作方式进行了有效的现实检验，

17
0:1:11,000 --> 0:1:15,000
那很自然。

18
0:1:15,000 --> 0:1:23,000
是否可以将那些在小规模开发中工作得很自然的方式，
带到大规模开发中去？

20
0:1:23,000 --> 0:1:29,000
Craig Larman和Bas Vodde对于这个问题
已经研究和实践了十多年了，

21
0:1:29,000 --> 0:1:35,000
进行了数百种试验，并最终形成了LeSS--多团队Scrum框架

22
0:1:35,000 --> 0:1:41,000
LeSS是一种规模化敏捷开发的简单框架，
它使用了这些还有其它一些原则。

24
0:1:42,000 --> 0:1:47,000
LeSS被应用于有12人的小组，
也有几百人和几千人的组织。

25
0:1:47,000 --> 0:1:53,000
涉及的产品横跨银行业、电信业、游戏产业、雷达系统等。

26
0:1:53,000 --> 0:1:55,000
LeSS是如何运作的？

27
0:1:55,000 --> 0:1:58,000
LeSS是多团队的Scrum。

28
0:1:58,000 --> 0:2:02,000
有一个产品负责人(PO)提供愿景，

29
0:2:02,000 --> 0:2:06,000
一个可调整的、以客户为中心的产品优先级列表，
叫做产品待办列表(Product Backlog)。

30
0:2:06,000 --> 0:2:12,000
我们期望每个Sprint(1-4周的时间盒)，
都产出一个集成好的、可交付的产品增量。

31
0:2:12,000 --> 0:2:16,000
多个团队在同一个Sprint中开发同一个产品。

32
0:2:16,000 --> 0:2:19,000
开发是不断迭代和增量的过程。

33
0:2:19,000 --> 0:2:24,000
每个Sprint是从Sprint计划会的第一部分开始，
它是一个多团队共同参与的短会

34
0:2:24,000 --> 0:2:30,000
每个团队从产品待办列表的最上端领取
他们在当前Sprint中要开发的功能。

35
0:2:30,000 --> 0:2:35,000
之后是Sprint计划会的第二部分，
各个团队就如何开发功能模块的策略进行充分的讨论。


37
0:2:36,000 --> 0:2:40,000
在这个Sprint内，
每个自管理团队就他们各自选定的功能进行开发，

38
0:2:40,000 --> 0:2:47,000
同时针对潜在可交付产品增量，
与其他团队保持合作和持续集成。

40
0:2:48,000 --> 0:2:56,000
在这种开发方式下，和团队之外的协调是该团队的责任，
所以没有委任任何协调者。

41
0:2:56,000 --> 0:3:02,000
在Sprint时间过半的时候，各个团队暂时停下手头工作，
参加产品待办列表梳理会(Product Backlog Refinement)

42
0:3:02,000 --> 0:3:07,000
与客户和最终用户协作，澄清未来的工作内容，

43
0:3:07,000 --> 0:3:13,000
通过连接团队和客户，我们把产品负责人解放出来，
从而集中精力在愿景和优先级排序的工作中。

44
0:3:13,000 --> 0:3:18,000
我们开一个Sprint评审会，
这是所有团队和客户共同参与的对话，

45
0:3:18,000 --> 0:3:22,000
探索已经完成了什么，
并决定下一步需要开发的产品增量是什么。

46
0:3:22,000 --> 0:3:27,000
每个团队召开回顾会，检视和调整自己的工作方式。

47
0:3:27,000 --> 0:3:31,000
我们希望团队成为拥有自己的方法和过程的主人翁，
而不是过客。

48
0:3:31,000 --> 0:3:34,000
没有这种主人翁意识，就不可能有持续的进步。

49
0:3:34,000 --> 0:3:39,000
在LeSS中，我们并不止步于团队回顾会。


50
0:3:39,000 --> 0:3:45,000
团队、产品负责人、Scrum Master们和管理团队，
召开整体回顾会

51
0:3:45,000 --> 0:3:50,000
来探索阻碍更高价值交付的系统性和组织级障碍。

52
0:3:50,000 --> 0:3:55,000
运用LeSS来检视和调整整个组织。

53
0:3:55,000 --> 0:4:02,000
然后他们重复整个周期，不断实验，
以使每次犯的错都比之前的更为明智

54
0:4:02,000 --> 0:4:07,000
当我们拥有超过八个团队时，
我们会开展一些类似的做法，称作LeSS Huge

55
0:4:07,000 --> 0:4:10,000
目的仍然是在每一个Sprint交付一个产品增量。

56
0:4:10,000 --> 0:4:19,000
这就是LeSS，
是在几分钟内你就能掌握的几条规则。

57
0:4:19,000 --> 0:4:23,000
但是它在你的组织里工作不起来！

58
0:4:23,000 --> 0:4:26,000
在你组织的现状下工作不起来。

59
0:4:26,000 --> 0:4:30,000
你的组织结构必须作出改变以使得敏捷能工作起来。

60
0:4:30,000 --> 0:4:32,000
这种组织变化不会很快也不容易。

61
0:4:32,000 --> 0:4:41,000
你和你的组织目前的设计，
会抵制、破坏和削弱任何为获得真正敏捷性所做出的改变。

63
0:4:42,000 --> 0:4:47,000
大规模敏捷框LeSS只有为数不多的几条规则，
但是都是具有深远影响的。

64
0:4:47,000 --> 0:4:56,000
采用LeSS可能需要数年，
用于去除现有的组织规则、流程、结构和习惯。


66
0:4:56,000 --> 0:5:01,000
采用LeSS不仅仅是流程上的变化，
或者在你现有的组织结果上增设岗位而已。

68
0:5:02,000 --> 0:5:08,000
你应该已经看到了那些给现有习惯贴上敏捷标签的行为，
并没有带来任何实质性的变化。

69
0:5:08,000 --> 0:5:11,000
采纳LeSS要走向更深层次。

70
0:5:11,000 --> 0:5:18,000
要挑战关于项目、产品、角色、技术实践，
乃至管理实践的传统观念和思维。

71
0:5:18,000 --> 0:5:22,000
我们通过改变结构和政策才能允许敏捷运作起来。

72
0:5:22,000 --> 0:5:29,000
例如，团队必须是跨职能的，
意味着团队成员不仅仅是拥有编程和测试的能力，

73
0:5:29,000 --> 0:5:36,000
也包含软件和架构设计的技巧、业务领域知识，
以及用户体验(UX)/用户界面(UI)的设计能力。

75
0:5:36,000 --> 0:5:42,000
团队负责与客户及终端用户澄清需求。

76
0:5:42,000 --> 0:5:47,000
团队也必须是特性团队(Feature Team)，
意味着他们能够开发以终端用户为中心导向的功能，

77
0:5:47,000 --> 0:5:50,000
而不仅仅是几个内部组件。

78
0:5:50,000 --> 0:5:57,000
LeSS团队跨越多个组件，工作于共享代码的环境中

79
0:5:57,000 --> 0:6:02,000
组织经常试图通过增加复杂性来解决眼前的问题。

80
0:6:02,000 --> 0:6:07,000
举个例子，假设我们的产品因为某一个团队忽视了某项测试
而在生产环境中出了问题，

82
0:6:07,000 --> 0:6:12,000
作为经理，我的第一反应是给团队加上规定的流程步骤，

83
0:6:12,000 --> 0:6:19,000
指派某人承担一个新的专门角色，
或者成立一个新部门来防止将来出现这种错误。

85
0:6:19,000 --> 0:6:27,000
但是，这三个速效方案都会降低团队责任感，
从而加剧了根本性的问题。

86
0:6:27,000 --> 0:6:35,000
把责任交给流程、专门的角色或者其他部门，
实际上拿走了团队的责任，

88
0:6:35,000 --> 0:6:38,000
公司最终只剩一群工作不走心的僵尸员工。

89
0:6:38,000 --> 0:6:43,000
我们反而相信要消减复杂性：
化繁为简，以少胜多。(More with Less)

90
0:6:43,000 --> 0:6:50,000
不鼓励那些任务的切换，或那些只用来准备的Sprints，
或只用来稳定的Sprints，或所谓的“依赖”

91
0:6:50,000 --> 0:6:56,000
或单独的负责分析的小组，或单独的架构师团队，
或每个团队单独的任务队列。

93
0:6:56,000 --> 0:7:01,000
在LeSS中，
Scrum Master和管理层帮助团队学习提高。

94
0:7:01,000 --> 0:7:07,000
管理层把着眼点从直接给出命令，
转变为提升整个开发系统的能力。

96
0:7:07,000 --> 0:7:12,000
在我们的经验里，
LeSS是一个最小但又刚好够用的结构，

97
0:7:12,000 --> 0:7:20,000
产品团队需要这个结构来承担产品所有权，
获得产品整体视角，优化组织以实现价值交付和灵活性。

99
0:7:20,000 --> 0:7:26,000
你可以学习到不断尝试的思维观念，以及超过500次实验，

100
0:7:26,000 --> 0:7:28,000
那些实验帮助创建了LeSS框架。

101
0:7:28,000 --> 0:7:33,000
强烈推荐的指南里面包含了如何应用的指导，
以及关于10个原则的更多内容。

102
0:7:33,000 --> 0:7:39,000
还有我们，一个在不断成长壮大的教练和实践者的社区。

103
0:7:39,000 --> 0:7:45,000
我们邀请你走出毫无生趣的、工业时代机械化的组织，

104
0:7:45,000 --> 0:7:49,000
走进那些人性化的、意义明确的组织中，
在那里工作会很有趣。

105
0:7:49,000 --> 0:7:54,000
这不是一蹴而就、轻松快捷、毫无痛楚的。

106
0:7:54,000 --> 0:8:01,000
但是如果你致力于此，你可以简化你的组织，
增加你应对商业环境变化的适应能力，

107
0:8:01,000 --> 0:8:09,000
去除不必要的苦差事，释放你们组织里一直都拥有的潜能。

