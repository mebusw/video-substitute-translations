0
0:0:0,000 --> 0:0:8,000
《误解了产品负责人角色会毁掉你的组织，你该怎么办》
中文字幕翻译：Jacky Shen (CST, CTC, LFST) 
Build20191122

001
0:0:8,000 --> 0:0:13,000
场景1：产品负责人角色应该如何工作？

1
0:0:15,000 --> 0:0:20,000
我最初接触Scrum是在一家非常小的公司中，
担任产品开发人员，

2
0:0:20,000 --> 0:0:22,000
不断演进的产品愿景很容易得到理解，

3
0:0:22,000 --> 0:0:25,000
不断涌现的事项优先级也很容易理解，

4
0:0:25,000 --> 0:0:27,000
我们的产品负责人，一位企业家，

5
0:0:27,000 --> 0:0:30,000
就在那里给我们分享业务目标。

6
0:0:30,000 --> 0:0:34,000
他对一份产品待办列表进行优先级排序，
我们一起梳理内容。

7
0:0:34,000 --> 0:0:38,000
与客户的互动有助于我们知道实现的细节。

8
0:0:38,000 --> 0:0:41,000
这也有助于我们成为一个跨职能团队，

9
0:0:41,000 --> 0:0:42,000
其中包括一名UI设计专家。

10
0:0:42,000 --> 0:0:45,000
随着我们成长为一支自我管理的团队，

11
0:0:45,000 --> 0:0:48,000
我们的产品负责人学会了越来越多地授权给我们。

002
0:0:48,000 --> 0:0:54,000
场景2：你的大型组织是如何错误解读产品负责人角色的？


12
0:0:55,000 --> 0:0:59,000
当我开始与尝试导入Scrum的大型组织合作时，

13
0:0:59,000 --> 0:1:1,000
我希望他们的团队更具生产力。

14
0:1:1,000 --> 0:1:4,000
在小型公司中，Scrum对我来说运作得非常好，

15
0:1:4,000 --> 0:1:9,000
为什么不将相同的模式复制粘贴到更大的组织中？

16
0:1:9,000 --> 0:1:11,000
过去只考虑团队生产力的情况下，

17
0:1:11,000 --> 0:1:13,000
那时似乎是有意义的

18
0:1:13,000 --> 0:1:17,000
每个团队都有一个人尝试扮演产品负责人。

19
0:1:17,000 --> 0:1:18,000
但这与我说的产品负责人不同，

20
0:1:18,000 --> 0:1:20,000
这些人都没有权力

21
0:1:20,000 --> 0:1:23,000
对整个产品做出重大业务决策。

22
0:1:23,000 --> 0:1:27,000
组织希望他们专注于本团队的交付。

23
0:1:27,000 --> 0:1:30,000
我将这种与Scrum的常见偏差称为团队产出负责人，

24
0:1:30,000 --> 0:1:34,000
因为这就是我见过的组织实际对他们的期望。

25
0:1:34,000 --> 0:1:36,000
顺便说一句，当我说团队产出负责人时，

26
0:1:36,000 --> 0:1:41,000
请想想，你自己或某人可能就是那“产品负责人”。

27
0:1:41,000 --> 0:1:44,000
没有权力对整个产品待办列表优先级排序，

28
0:1:44,000 --> 0:1:47,000
每个团队产出负责人都管理一个团队待办列表，

29
0:1:47,000 --> 0:1:49,000
有充分的理由说明那不是个Scrum工件。

30
0:1:49,000 --> 0:1:52,000
这些团队最初看起来很有效率，

31
0:1:52,000 --> 0:1:55,000
并有一种提高了敏捷度的幻想。

32
0:1:55,000 --> 0:1:57,000
他们改善了内部协作，

33
0:1:57,000 --> 0:1:58,000
—— 只在团队内 ——

34
0:1:58,000 --> 0:2:0,000
但并非团队之间。

35
0:2:0,000 --> 0:2:2,000
作为天真的敏捷教练，我不知道该怎么办

36
0:2:2,000 --> 0:2:5,000
只听说过一种“ Scrum of Scrums”模式。

37
0:2:5,000 --> 0:2:10,000
那通常变成传统的项目经理汇报会议。

003
0:2:10,000 --> 0:2:15,000
场景3A：错误解读产品负责人角色如何延迟了客户反馈？

38
0:2:16,000 --> 0:2:21,000
真正的Scrum团队尝试在每个Sprint中开发可交付产品

39
0:2:21,000 --> 0:2:25,000
因此我们可以更快地了解最终用户的真正需求。

40
0:2:25,000 --> 0:2:29,000
大型组织中的团队有时仅能开发一些组件

41
0:2:29,000 --> 0:2:32,000
组件不是端到端、以客户为中心的功能。

42
0:2:32,000 --> 0:2:35,000
只关注中层管理者的内部目标，

43
0:2:35,000 --> 0:2:37,000
而不是更广泛的业务目标，

44
0:2:37,000 --> 0:2:40,000
那可能会导致团队尝试增加团队产出，

45
0:2:40,000 --> 0:2:42,000
有时按“速率”来度量。

46
0:2:42,000 --> 0:2:44,000
事实证明，以后会发生的就是

47
0:2:44,000 --> 0:2:47,000
不同团队做出的组件不匹配？

48
0:2:47,000 --> 0:2:50,000
人们有时认为团队应该专注于增加其产出。

49
0:2:50,000 --> 0:2:53,000
容易被诸如“速度”之类的度量所带偏。

50
0:2:53,000 --> 0:2:55,000
但总的来说，

51
0:2:55,000 --> 0:2:57,000
专注于此会增加集成的问题

52
0:2:57,000 --> 0:3:0,000
并实际上延迟了获得客户响应的能力。

53
0:3:0,000 --> 0:3:4,000
如果我们的工作必须与其他内容
集成以获得可交付的功能

54
0:3:4,000 --> 0:3:7,000
可能需要更长的时间来获得真正的客户反应，

55
0:3:7,000 --> 0:3:9,000
以及从中学习，和调整我们的方向。

56
0:3:9,000 --> 0:3:13,000
过多从内部组织层面关注内部目标

57
0:3:13,000 --> 0:3:17,000
意味着减少对业务目标和整体产品视图的关注。

58
0:3:17,000 --> 0:3:23,000
更长的客户端到端周期时间降低了敏捷性。

0031
0:3:23,000 --> 0:3:30,000
场景3B：错误解读产品负责人角色如何降低
了开发人员的积极性和对客户的感同身受？

59
0:3:30,000 --> 0:3:33,000
关于许多大型组织的另一件怪事是

60
0:3:33,000 --> 0:3:37,000
开发团队通常不与客户和最终用户交谈！

61
0:3:37,000 --> 0:3:39,000
开发人员从一开始就将内部中间人、

62
0:3:39,000 --> 0:3:41,000
甚至其他开发团队作为他们与客户的主要联系

63
0:3:41,000 --> 0:3:43,000
甚至其他开发团队作为他们与客户的主要联系


64
0:3:43,000 --> 0:3:47,000
相比与真实客户交谈，试图满足
内部中间人可并不有趣或有效

65
0:3:47,000 --> 0:3:50,000
相比与真实客户交谈，试图满足
内部中间人可并不有趣或有效

0040
0:3:50,000 --> 0:3:54,000
场景4A：真正的产品负责人如何交付最高的客户价值？

66
0:3:58,000 --> 0:4:1,000
真正的产品负责人可以做出重大业务决策

67
0:4:1,000 --> 0:4:4,000
并随着我们的更多了解而演进产品愿景。

68
0:4:4,000 --> 0:4:6,000
以客户为中心的产品待办列表要描述问题

69
0:4:6,000 --> 0:4:8,000
—— 而不是任务 ——

70
0:4:8,000 --> 0:4:12,000
开发团队可以完成设计解决方案的高阶工作。

71
0:4:12,000 --> 0:4:14,000
而不仅仅是遵照规格书进行编码。

72
0:4:14,000 --> 0:4:15,000
作为一个跨职能团队，

73
0:4:15,000 --> 0:4:20,000
他们应该带有或学习所有必要的技能来进行高阶工作。

74
0:4:20,000 --> 0:4:22,000
这些技能包括

75
0:4:22,000 --> 0:4:24,000
分析、架构、设计、

76
0:4:24,000 --> 0:4:27,000
测试、集成、编码、

77
0:4:27,000 --> 0:4:29,000
部署、用户体验......

78
0:4:29,000 --> 0:4:31,000
他们还要学习业务领域知识

79
0:4:31,000 --> 0:4:35,000
Scrum通过消除角色区别，将各个职能融合在一起。

80
0:4:35,000 --> 0:4:39,000
消除角色可以将流程所有权交到团队手中。

81
0:4:39,000 --> 0:4:41,000
有些人认为Scrum就是加一些诸如

82
0:4:41,000 --> 0:4:44,000
燃尽图、斐波那契数列、速率。

83
0:4:44,000 --> 0:4:46,000
这些添加的内容有时可能有用，

84
0:4:46,000 --> 0:4:48,000
但它们不是Scrum的一部分。

85
0:4:48,000 --> 0:4:51,000
Scrum的主要好处是消除了流程和角色。

86
0:4:51,000 --> 0:4:54,000
当产品负责人做出重大业务决策后，

87
0:4:54,000 --> 0:4:57,000
他或她可以更改产品待办列表以反映这一点。

88
0:4:57,000 --> 0:5:0,000
组织没有结构上的变化，

89
0:5:0,000 --> 0:5:3,000
而且团队已经习惯了处理高阶问题

90
0:5:3,000 --> 0:5:5,000
和学习新事物。

0041
0:5:5,000 --> 0:5:12,000
场景4B：错误解读产品负责人角色如何降低价值交付？

91
0:5:13,000 --> 0:5:15,000
大型组织中的团队

92
0:5:15,000 --> 0:5:18,000
冒着在代码某个区域过度专业化的风险。

93
0:5:18,000 --> 0:5:21,000
（顺便说一下，其他团队其实也无法理解他们的代码。）

94
0:5:21,000 --> 0:5:23,000
有时他们的技能会过时，

95
0:5:23,000 --> 0:5:27,000
他们不会知道还有其他有用的方法和技术。

96
0:5:27,000 --> 0:5:31,000
团队输出负责人将尝试对局部的
待办清单排序，以提供最大的价值。

97
0:5:31,000 --> 0:5:33,000
我们会得到一个Scrum在起作用的假象。

98
0:5:33,000 --> 0:5:35,000
团队也会认为这是最优状况，

99
0:5:35,000 --> 0:5:37,000
也许是因为太专注于输出了

100
0:5:37,000 --> 0:5:40,000
或者一直被确切告知该做什么的状态太舒服了

101
0:5:40,000 --> 0:5:43,000
但是给客户带来的好处却比应有的少

102
0:5:43,000 --> 0:5:45,000
因为还有更多重要的工作

103
0:5:45,000 --> 0:5:48,000
隐藏在我们团队不了解的其他待办清单中。

104
0:5:48,000 --> 0:5:50,000
比起其他团队没有时间开始的工作，
我们团队的头等大事其实不太重要
。

105
0:5:50,000 --> 0:5:52,000
比起其他团队没有时间开始的工作，
我们团队的头等大事其实不太重要
。

106
0:5:52,000 --> 0:5:54,000
保有单独的团队待办清单

107
0:5:54,000 --> 0:5:55,000
—— 单独的清单 ——

108
0:5:55,000 --> 0:5:56,000
掩盖了这个问题。

109
0:5:56,000 --> 0:5:59,000
可能只有少数几个团队在做最有价值的工作。

110
0:5:59,000 --> 0:6:1,000
我们对客户的影响极为有限的。

111
0:6:1,000 --> 0:6:3,000
而改变方向，即

112
0:6:3,000 --> 0:6:4,000
—— 敏捷的要点 ——

113
0:6:4,000 --> 0:6:6,000
对于这种组织将很难。

0050
0:6:7,000 --> 0:6:12,000
场景5：试图履行错误解读的产品负责人角色
有什么不爽的地方？

114
0:6:13,000 --> 0:6:15,000
团队输出负责人夹在中间。

115
0:6:15,000 --> 0:6:17,000
他们是无权做出重大业务决策的中间商。

116
0:6:17,000 --> 0:6:19,000
他们是无权做出重大业务决策的中间商。

117
0:6:19,000 --> 0:6:23,000
有时，他们会为自己实际上无法控制的事情“负责任”。

118
0:6:23,000 --> 0:6:25,000
他们冒着成为需求工程师的风险，

119
0:6:25,000 --> 0:6:27,000
甚至扮演业务分析师或项目经理。

120
0:6:27,000 --> 0:6:31,000
他们可能会尝试编写完善的“用户故事”作为详细需求，

121
0:6:31,000 --> 0:6:33,000
然后在它们不完美时进行澄清。

122
0:6:33,000 --> 0:6:36,000
他们可能会协调团队的工作与其他团队的工作，

123
0:6:36,000 --> 0:6:37,000
跟踪依赖关系，

124
0:6:37,000 --> 0:6:38,000
行政工作，

125
0:6:38,000 --> 0:6:39,000
状态汇报，

126
0:6:39,000 --> 0:6:41,000
或推动团队获得更多产出。

127
0:6:41,000 --> 0:6:42,000
在某些情况下，

128
0:6:42,000 --> 0:6:45,000
这个人受到组织内其他部分的压力，

129
0:6:45,000 --> 0:6:49,000
没法真的像个企业家那样行事。

0060
0:6:49,000 --> 0:6:52,000
场景6：提高团队自组织和跨职能如何帮助
卡在这个角色中的人们？

130
0:6:52,000 --> 0:6:56,000
我尊重那些实践者们，他们觉得每个团队
有一个人扮演这个角色

131
0:6:56,000 --> 0:6:58,000
适合他们的现状。

132
0:6:58,000 --> 0:7:0,000
有个人在房间里可以促进很多事情的完成

133
0:7:0,000 --> 0:7:2,000
那人可以立即提供反馈

134
0:7:2,000 --> 0:7:4,000
并当场回答需求问题。

135
0:7:4,000 --> 0:7:6,000
我们当然想要那样。

136
0:7:6,000 --> 0:7:8,000
我记得在一些地方上述是可行的

137
0:7:8,000 --> 0:7:11,000
那边已经具备缩小权力差异的社会环境

138
0:7:11,000 --> 0:7:13,000
人们会自然地分担责任，

139
0:7:13,000 --> 0:7:15,000
就像无角色团队那样势在必行。

140
0:7:15,000 --> 0:7:17,000
但是，需要我帮助的组织

141
0:7:17,000 --> 0:7:20,000
通常都早已习惯于森严等级。

142
0:7:20,000 --> 0:7:23,000
对于他们来说，与角色关联的地位差异是非常真实的

143
0:7:23,000 --> 0:7:26,000
而且我不会要他们假装所有角色都是平等的

144
0:7:26,000 --> 0:7:28,000
但一个角色比其他角色更平等。

145
0:7:28,000 --> 0:7:31,000
为了降低添加不必要层次结构的风险，

146
0:7:31,000 --> 0:7:34,000
我想强调一下Scrum只有三个角色的原因，

147
0:7:34,000 --> 0:7:37,000
和无角色团队自组织的力量，

148
0:7:37,000 --> 0:7:39,000
前提是Scrum Master和管理者
创建一个允许的环境。

149
0:7:39,000 --> 0:7:41,000
前提是Scrum Master和管理者
创建一个允许的环境。

150
0:7:41,000 --> 0:7:43,000
为什么我们会害怕一个人加入却

151
0:7:43,000 --> 0:7:47,000
没有任何特殊的角色指定，以便与其他人区分？

152
0:7:47,000 --> 0:7:49,000
那么团队可以自己弄清楚

153
0:7:49,000 --> 0:7:51,000
谁会在每种情况下做什么

154
0:7:51,000 --> 0:7:54,000
而不是受到外部施加的过程的约束。

155
0:7:54,000 --> 0:7:57,000
团队自我管理，没有角色。

156
0:7:57,000 --> 0:7:58,000
这有什么可怕的？

157
0:7:58,000 --> 0:8:1,000
请写信给我，你会想象到什么坏事发生

158
0:8:1,000 --> 0:8:6,000
我将制作有关这些顾虑的后续视频。

0070
0:8:6,000 --> 0:8:11,000
场景7：有必要创建一个继承于PO的新角色吗？
例如首席PO，业务负责人等

159
0:8:11,000 --> 0:8:15,000
如果我的公司试图与这些人一起开发产品

160
0:8:15,000 --> 0:8:17,000
而我们的长期生存取决于

161
0:8:17,000 --> 0:8:20,000
学会专注于最重要的事情，

162
0:8:20,000 --> 0:8:24,000
我会考虑将最重要的问题保留在
同一份真正的产品待办列表中

163
0:8:24,000 --> 0:8:27,000
并要求产品开发人员专注于此

164
0:8:27,000 --> 0:8:29,000
而不是按照过去对他们来说最简单的方式。

165
0:8:29,000 --> 0:8:31,000
当然，团队不会被轻易替代。

166
0:8:31,000 --> 0:8:35,000
他们可以共同决定，

167
0:8:35,000 --> 0:8:38,000
哪些团队在每个Sprint中将做哪些产品待办事项。

168
0:8:38,000 --> 0:8:40,000
为了帮助建立整体产品视图，

169
0:8:40,000 --> 0:8:44,000
我请Scrum Masters帮助消除团队之间的障碍，

170
0:8:44,000 --> 0:8:46,000
并教给产品开发人员

171
0:8:46,000 --> 0:8:50,000
跨团队合作现在是产品开发人员的责任。

172
0:8:50,000 --> 0:8:52,000
我也想消除障碍

173
0:8:52,000 --> 0:8:56,000
不再阻止开发人员从客户那里获得详细的说明

174
0:8:56,000 --> 0:8:58,000
我们就不再需要用勺子喂它们了。

175
0:8:58,000 --> 0:9:1,000
实际上，现在开发人员将帮助管理产品待办清单。

176
0:9:1,000 --> 0:9:4,000
我描述的方式如果全部应用起来可能需要几年的时间，

177
0:9:4,000 --> 0:9:6,000
但之前已经发生过

178
0:9:6,000 --> 0:9:8,000
我们的产品待办清单应该不断变化

179
0:9:8,000 --> 0:9:11,000
我们需要一个有真正权威和愿景的人

180
0:9:11,000 --> 0:9:13,000
最大化我们开发工作的价值

181
0:9:13,000 --> 0:9:16,000
对这些条目的优先级顺序进行最终拍板。

182
0:9:16,000 --> 0:9:20,000
我们不需要为最终的优先级来源重新命名，

183
0:9:20,000 --> 0:9:23,000
因为它并不是个新角色。

184
0:9:23,000 --> 0:9:27,000
咱们称之为产品负责人吧。

185
0:9:29,000 --> 0:9:36,000
中文字幕翻译：Jacky Shen (CST, CTC, LFST)
个人博客：www.JackyShen.com

