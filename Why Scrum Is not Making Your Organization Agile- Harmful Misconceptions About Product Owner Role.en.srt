1
0:0:15,000 --> 0:0:20,000
I first did Scrum as a product developer in a very small company.

2
0:0:20,000 --> 0:0:22,000
It was easy to know our Product Vision as it evolved,

3
0:0:22,000 --> 0:0:25,000
and our priorities as they emerged.

4
0:0:25,000 --> 0:0:27,000
Our Product Owner, an entrepreneur,

5
0:0:27,000 --> 0:0:30,000
was right there sharing our business objectives.

6
0:0:30,000 --> 0:0:34,000
He prioritized one Product Backlog and we refined it together.

7
0:0:34,000 --> 0:0:38,000
Customer interaction helped us know the details of what to do.

8
0:0:38,000 --> 0:0:41,000
It also helped that we were a cross-functional team,

9
0:0:41,000 --> 0:0:42,000
including a UI design expert.

10
0:0:42,000 --> 0:0:45,000
As we grew into a self-managing team,

11
0:0:45,000 --> 0:0:55,000
Our product owner learned to delegate more and more to us.

12
0:0:55,000 --> 0:0:59,000
When I started working with larger organizations trying to do Scrum,

13
0:0:59,000 --> 0:1:1,000
I wanted their teams to be productive.

14
0:1:1,000 --> 0:1:4,000
Scrum worked so well for me in a small company,

15
0:1:4,000 --> 0:1:9,000
why not copy-paste the same pattern into a larger organization?

16
0:1:9,000 --> 0:1:11,000
Thinking only about team productivity,

17
0:1:11,000 --> 0:1:13,000
in those days it seemed to make sense

18
0:1:13,000 --> 0:1:17,000
for each team to have its own person trying to act as Product Owner.

19
0:1:17,000 --> 0:1:18,000
But unlike my Product Owner,

20
0:1:18,000 --> 0:1:20,000
none of these people had the authority

21
0:1:20,000 --> 0:1:23,000
to make major business decisions about the whole product.

22
0:1:23,000 --> 0:1:27,000
The organization expected them to focus on their team’s delivery.

23
0:1:27,000 --> 0:1:30,000
I'll call this common deviation from Scrum a Team Output Owner,

24
0:1:30,000 --> 0:1:34,000
because that's what the organizations I've seen actually expect from them.

25
0:1:34,000 --> 0:1:36,000
With respect, when I say Team Output Owner,

26
0:1:36,000 --> 0:1:41,000
please consider it may apply to you or others you call "Product Owner."

27
0:1:41,000 --> 0:1:44,000
Without authority to prioritize the whole Product Backlog,

28
0:1:44,000 --> 0:1:47,000
each Team Output Owner was in charge of a Team Backlog,

29
0:1:47,000 --> 0:1:49,000
which for good reasons is not a Scrum artifact.

30
0:1:49,000 --> 0:1:52,000
Those teams initially seemed productive

31
0:1:52,000 --> 0:1:55,000
and there was kind of an illusion of improved agility.

32
0:1:55,000 --> 0:1:57,000
They improved their internal collaboration

33
0:1:57,000 --> 0:1:58,000
-- within teams --

34
0:1:58,000 --> 0:2:0,000
but not between teams.

35
0:2:0,000 --> 0:2:2,000
As a NAIVE agile coach I didn't know what to do

36
0:2:2,000 --> 0:2:5,000
except a pattern I'd heard called "Scrum of Scrums."

37
0:2:5,000 --> 0:2:17,000
That often devolved into a traditional project manager status meeting.

38
0:2:17,000 --> 0:2:21,000
Real Scrum teams try to develop shippable products every Sprint

39
0:2:21,000 --> 0:2:25,000
so we can more quickly learn what our end users really need.

40
0:2:25,000 --> 0:2:29,000
Teams in large organizations sometimes only make components

41
0:2:29,000 --> 0:2:32,000
that are not end-to-end, customer-centric features.

42
0:2:32,000 --> 0:2:35,000
Focusing on the internal objectives of middle managers

43
0:2:35,000 --> 0:2:37,000
instead of broader business objectives

44
0:2:37,000 --> 0:2:40,000
can cause teams to try to increase team output,

45
0:2:40,000 --> 0:2:42,000
sometimes measured as "velocity."

46
0:2:42,000 --> 0:2:44,000
What will happen later when it turns out

47
0:2:44,000 --> 0:2:47,000
the components made by different teams don't fit together?

48
0:2:47,000 --> 0:2:50,000
People sometimes think teams should focus on increasing their output.

49
0:2:50,000 --> 0:2:53,000
It's easy to get distracted by measurable things like "velocity."

50
0:2:53,000 --> 0:2:55,000
But in the big picture,

51
0:2:55,000 --> 0:2:57,000
focusing on that can increase integration problems

52
0:2:57,000 --> 0:3:0,000
and actually delay our ability to get customer response.

53
0:3:0,000 --> 0:3:4,000
If our work has to be integrated with other stuff to get shippable features

54
0:3:4,000 --> 0:3:7,000
It can take longer to get a real customer reaction,

55
0:3:7,000 --> 0:3:9,000
learn from it, and adjust our direction.

56
0:3:9,000 --> 0:3:13,000
More focus on internal objectives from internal organizational layers

57
0:3:13,000 --> 0:3:17,000
means less focus on business objectives and the Whole Product View.

58
0:3:17,000 --> 0:3:30,000
Longer end-to-end cycle times with the customer reduce agility.

59
0:3:30,000 --> 0:3:33,000
Another weird thing about many large organizations is that

60
0:3:33,000 --> 0:3:37,000
development teams often don't talk to customers and end users!

61
0:3:37,000 --> 0:3:39,000
Developers start to see internal go-betweens

62
0:3:39,000 --> 0:3:41,000
as their main connection to the customers

63
0:3:41,000 --> 0:3:43,000
or even the other development teams.

64
0:3:43,000 --> 0:3:47,000
Trying to satisfy internal go-betweens isn’t nearly as fun or effective

65
0:3:47,000 --> 0:3:58,000
as talking to real customers using our product.

66
0:3:58,000 --> 0:4:1,000
A real Product Owner can make major business decisions

67
0:4:1,000 --> 0:4:4,000
and evolve the Product Vision as we learn more.

68
0:4:4,000 --> 0:4:6,000
The customer-centric Product Backlog describes problems

69
0:4:6,000 --> 0:4:8,000
— not tasks—

70
0:4:8,000 --> 0:4:12,000
and the development team can do the high-order work of devising solutions.

71
0:4:12,000 --> 0:4:14,000
They don't only code to specifications.

72
0:4:14,000 --> 0:4:15,000
As a cross-functional team,

73
0:4:15,000 --> 0:4:20,000
they should bring or learn all the necessary skills to do high-order work.

74
0:4:20,000 --> 0:4:22,000
Some of those skills include

75
0:4:22,000 --> 0:4:24,000
analysis, architecture, design,

76
0:4:24,000 --> 0:4:27,000
testing, integration, coding,

77
0:4:27,000 --> 0:4:29,000
deployment, user experience ...

78
0:4:29,000 --> 0:4:31,000
and they learn the business domain.

79
0:4:31,000 --> 0:4:35,000
Scrum combines cross-functionality with the removal of role distinctions.

80
0:4:35,000 --> 0:4:39,000
Eliminating roles puts process ownership in the team's hands.

81
0:4:39,000 --> 0:4:41,000
Some people think Scrum is about adding stuff like

82
0:4:41,000 --> 0:4:44,000
burndown charts, Fibonacci numbers, velocity.

83
0:4:44,000 --> 0:4:46,000
Those added things might sometimes be useful,

84
0:4:46,000 --> 0:4:48,000
but they aren't part of Scrum.

85
0:4:48,000 --> 0:4:51,000
The main benefits of Scrum are from eliminating processes and roles.

86
0:4:51,000 --> 0:4:54,000
When the Product Owner has made a major business decision,

87
0:4:54,000 --> 0:4:57,000
he or she can change the Product Backlog to reflect this.

88
0:4:57,000 --> 0:5:0,000
There's no structural change to the organization,

89
0:5:0,000 --> 0:5:3,000
and the team is already in the habit of taking on high order problems

90
0:5:3,000 --> 0:5:13,000
and learning new things.

91
0:5:13,000 --> 0:5:15,000
A team in a large organization

92
0:5:15,000 --> 0:5:18,000
runs the risk of becoming overspecialized in one area of the code.

93
0:5:18,000 --> 0:5:21,000
(By the way, other teams can't understand their code either.)

94
0:5:21,000 --> 0:5:23,000
Sometimes their skills will be out of date,

95
0:5:23,000 --> 0:5:27,000
and they won't know that there are other useful methods and techniques.

96
0:5:27,000 --> 0:5:31,000
The Team Output Owner will try to order the local Backlog to deliver the most value.

97
0:5:31,000 --> 0:5:33,000
We’ll have the illusion that Scrum is working.

98
0:5:33,000 --> 0:5:35,000
Teams can also fall into thinking this is optimal,

99
0:5:35,000 --> 0:5:37,000
maybe from being too focused on output

100
0:5:37,000 --> 0:5:40,000
or maybe too comfortable being told exactly what to do

101
0:5:40,000 --> 0:5:43,000
But the benefit to customers is less than it should be

102
0:5:43,000 --> 0:5:45,000
because there's more important work to do

103
0:5:45,000 --> 0:5:48,000
hidden in other backlogs that our team isn't learning about.

104
0:5:48,000 --> 0:5:50,000
Our team's top item is less important

105
0:5:50,000 --> 0:5:52,000
than work other teams don't have time to start.

106
0:5:52,000 --> 0:5:54,000
Keeping separate Team Backlogs

107
0:5:54,000 --> 0:5:55,000
— separate lists —

108
0:5:55,000 --> 0:5:56,000
obscures this problem.

109
0:5:56,000 --> 0:5:59,000
Odds are only a few teams are doing the most valuable work.

110
0:5:59,000 --> 0:6:1,000
Our impact on customers will be limited.

111
0:6:1,000 --> 0:6:3,000
And changing directions

112
0:6:3,000 --> 0:6:4,000
— the point of Agility —

113
0:6:4,000 --> 0:6:13,000
will be difficult with this kind of organization.

114
0:6:13,000 --> 0:6:15,000
Team Output Owners are stuck in the middle.

115
0:6:15,000 --> 0:6:17,000
They are intermediaries without

116
0:6:17,000 --> 0:6:19,000
the authority to make major business decisions.

117
0:6:19,000 --> 0:6:23,000
Sometimes they are held “accountable” for things they can’t actually control.

118
0:6:23,000 --> 0:6:25,000
They risk becoming requirements engineers,

119
0:6:25,000 --> 0:6:27,000
business analysts, or project managers.

120
0:6:27,000 --> 0:6:31,000
They might try to write perfect “User Stories” as detailed requirements,

121
0:6:31,000 --> 0:6:33,000
then clarify them when they aren’t perfect.

122
0:6:33,000 --> 0:6:36,000
They might coordinate the team’s work with the work of other teams,

123
0:6:36,000 --> 0:6:37,000
track dependencies,

124
0:6:37,000 --> 0:6:38,000
administrative work,

125
0:6:38,000 --> 0:6:39,000
status reporting,

126
0:6:39,000 --> 0:6:41,000
or push the team for more output.

127
0:6:41,000 --> 0:6:42,000
In some cases,

128
0:6:42,000 --> 0:6:45,000
this person is under pressure from elsewhere within the organization,

129
0:6:45,000 --> 0:6:52,000
not really able to act as an entrepreneur.

130
0:6:52,000 --> 0:6:56,000
I respect the practitioners who feel that one person per team playing this role

131
0:6:56,000 --> 0:6:58,000
is appropriate for their situation.

132
0:6:58,000 --> 0:7:0,000
They get a lot done having someone in the room

133
0:7:0,000 --> 0:7:2,000
who can give immediate feedback

134
0:7:2,000 --> 0:7:4,000
and answer requirements questions on the spot.

135
0:7:4,000 --> 0:7:6,000
Of course we all want that.

136
0:7:6,000 --> 0:7:8,000
I have the impression that the places this works

137
0:7:8,000 --> 0:7:11,000
already have the social environment that minimizes power differences

138
0:7:11,000 --> 0:7:13,000
and people share responsibility naturally,

139
0:7:13,000 --> 0:7:15,000
just as a role-free team is required to do.

140
0:7:15,000 --> 0:7:17,000
But organizations that ask for my help

141
0:7:17,000 --> 0:7:20,000
are usually starting with hierarchical habits.

142
0:7:20,000 --> 0:7:23,000
For them, status differences linked to roles are very real

143
0:7:23,000 --> 0:7:26,000
and I'm not going to tell them to pretend all roles are equal

144
0:7:26,000 --> 0:7:28,000
but one role is more equal than others.

145
0:7:28,000 --> 0:7:31,000
To reduce the risk of adding unnecessary hierarchy,

146
0:7:31,000 --> 0:7:34,000
I like to emphasize the reason Scrum has only three roles,

147
0:7:34,000 --> 0:7:37,000
and the power of role-free team self-organization

148
0:7:37,000 --> 0:7:39,000
when the Scrum Master and Management

149
0:7:39,000 --> 0:7:41,000
creates an environment that allows it.

150
0:7:41,000 --> 0:7:43,000
Why would we be afraid of this person joining

151
0:7:43,000 --> 0:7:47,000
without any special role designation separating them from others?

152
0:7:47,000 --> 0:7:49,000
Then the team could figure out for themselves

153
0:7:49,000 --> 0:7:51,000
who would do what in each situation

154
0:7:51,000 --> 0:7:54,000
instead of being constrained by a process imposed from outside.

155
0:7:54,000 --> 0:7:57,000
Team self-management happens without roles.

156
0:7:57,000 --> 0:7:58,000
What's scary about that?

157
0:7:58,000 --> 0:8:1,000
Please write to me what bad thing you imagine would happen

158
0:8:1,000 --> 0:8:11,000
and I'll make follow-up videos about those concerns.

159
0:8:11,000 --> 0:8:15,000
If my company was trying to develop a product with these people

160
0:8:15,000 --> 0:8:17,000
and our long-term survival depended on

161
0:8:17,000 --> 0:8:20,000
learning to focus on the most important things,

162
0:8:20,000 --> 0:8:24,000
I'd consider keeping the most important problems in one real Product Backlog

163
0:8:24,000 --> 0:8:27,000
and asking Product Developers to focus on that

164
0:8:27,000 --> 0:8:29,000
instead of what has been easiest for them in the past.

165
0:8:29,000 --> 0:8:31,000
Of course teams won't become interchangeable.

166
0:8:31,000 --> 0:8:35,000
That's something they can work out with each other as they decide for themselves

167
0:8:35,000 --> 0:8:38,000
which teams will do which Product Backlog Items each Sprint.

168
0:8:38,000 --> 0:8:40,000
To help foster a Whole Product View,

169
0:8:40,000 --> 0:8:44,000
I would ask the Scrum Masters to help remove the barriers between teams,

170
0:8:44,000 --> 0:8:46,000
and teach the Product Developers that

171
0:8:46,000 --> 0:8:50,000
collaborating across team boundaries is now a Product Developer responsibility.

172
0:8:50,000 --> 0:8:52,000
I'd also want to remove barriers

173
0:8:52,000 --> 0:8:56,000
preventing developers from getting detailed clarification from Customers

174
0:8:56,000 --> 0:8:58,000
so we don't need to spoon-feed them anymore.

175
0:8:58,000 --> 0:9:1,000
In fact, now the Developers will help manage the Product Backlog.

176
0:9:1,000 --> 0:9:4,000
It could take years before all this works the way I'm describing,

177
0:9:4,000 --> 0:9:6,000
but it's been done before.

178
0:9:6,000 --> 0:9:8,000
Our Product Backlog should constantly change

179
0:9:8,000 --> 0:9:11,000
and we'll need someone with real authority and vision

180
0:9:11,000 --> 0:9:13,000
to maximize the value of our development work

181
0:9:13,000 --> 0:9:16,000
by making the final call on the order of those items.

182
0:9:16,000 --> 0:9:20,000
We don't need to invent a new name for our ultimate source of priorities,

183
0:9:20,000 --> 0:9:23,000
because it's not really a new role.

184
0:9:23,000 --> 0:9:27,000
let's call this person Proudct Owner
